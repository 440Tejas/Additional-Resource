
Slip 1 
1]
	
Step 1: Create a SplashActivity
In your Android project, create a new Java class called SplashActivity. This will represent the splash screen activity.

java

package com.example.myapp;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import androidx.appcompat.app.AppCompatActivity;

public class SplashActivity extends AppCompatActivity {

    private static final int SPLASH_DISPLAY_LENGTH = 3000; // 3 seconds

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_splash); // Splash screen layout

        // Delayed execution to launch the main activity after a specified time
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                // Start the main activity
                Intent mainIntent = new Intent(SplashActivity.this, MainActivity.class);
                startActivity(mainIntent);
                finish(); // Close the splash activity
            }
        }, SPLASH_DISPLAY_LENGTH);
    }
}
Step 2: Create a Layout for the Splash Screen
Create a layout file called activity_splash.xml under res/layout. This layout represents the visual elements of the splash screen.

xml

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center"
    android:background="@android:color/holo_blue_light"> <!-- Background color for splash screen -->

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Welcome to My App"
        android:textSize="24sp"
        android:textStyle="bold"
        android:layout_centerInParent="true"/>

</RelativeLayout>
Step 3: Modify AndroidManifest.xml
To make the SplashActivity the launcher activity (the first activity when the app starts), update the AndroidManifest.xml.

xml

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.myapp">

    <application
        android:allowBackup="true"
        android:label="@string/app_name"
        android:theme="@style/Theme.MyApp">

        <!-- SplashActivity should be the launcher activity -->
        <activity android:name=".SplashActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!-- MainActivity - The main activity of your application -->
        <activity android:name=".MainActivity" />

    </application>
</manifest>

2]

Step 1: Create the Database Helper
First, create a class to manage the SQLite database. This class will contain the schema for your Student table and methods to perform database operations.

java

package com.example.mystudentapp;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class StudentDatabaseHelper extends SQLiteOpenHelper {

    private static final String DATABASE_NAME = "StudentDatabase";
    private static final int DATABASE_VERSION = 1;

    private static final String TABLE_STUDENT = "Student";
    private static final String COLUMN_ROLL_NO = "roll_no";
    private static final String COLUMN_NAME = "name";
    private static final String COLUMN_ADDRESS = "address";
    private static final String COLUMN_PERCENTAGE = "percentage";

    public StudentDatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // Create the Student table
        String createTableQuery = "CREATE TABLE " + TABLE_STUDENT + " (" +
                COLUMN_ROLL_NO + " INTEGER PRIMARY KEY, " +
                COLUMN_NAME + " TEXT, " +
                COLUMN_ADDRESS + " TEXT, " +
                COLUMN_PERCENTAGE + " REAL)";
        db.execSQL(createTableQuery);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // Drop the table if it exists
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_STUDENT);
        onCreate(db);
    }

    // Method to insert a student record
    public boolean insertStudent(int roll_no, String name, String address, double percentage) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(COLUMN_ROLL_NO, roll_no);
        values.put(COLUMN_NAME, name);
        values.put(COLUMN_ADDRESS, address);
        values.put(COLUMN_PERCENTAGE, percentage);
        long result = db.insert(TABLE_STUDENT, null, values);
        return result != -1; // Returns true if insertion was successful
    }

    // Method to retrieve all student records
    public Cursor getAllStudents() {
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT * FROM " + TABLE_STUDENT;
        return db.rawQuery(query, null);
    }
}
Step 2: Create the Main Activity
Next, create the main activity to insert and display student records.

java

package com.example.mystudentapp;

import android.database.Cursor;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private StudentDatabaseHelper dbHelper;
    private EditText rollNoInput, nameInput, addressInput, percentageInput;
    private TextView outputView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        dbHelper = new StudentDatabaseHelper(this);

        rollNoInput = findViewById(R.id.roll_no_input);
        nameInput = findViewById(R.id.name_input);
        addressInput = findViewById(R.id.address_input);
        percentageInput = findViewById(R.id.percentage_input);

        Button insertButton = findViewById(R.id.insert_button);
        Button showAllButton = findViewById(R.id.show_all_button);

        outputView = findViewById(R.id.output_view);

        insertButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                insertStudent();
            }
        });

        showAllButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showAllStudents();
            }
        });
    }

    // Method to insert a student record
    private void insertStudent() {
        try {
            int roll_no = Integer.parseInt(rollNoInput.getText().toString());
            String name = nameInput.getText().toString();
            String address = addressInput.getText().toString();
            double percentage = Double.parseDouble(percentageInput.getText().toString());

            if (dbHelper.insertStudent(roll_no, name, address, percentage)) {
                outputView.setText("Student record inserted successfully.");
            } else {
                outputView.setText("Error inserting student record.");
            }
        } catch (NumberFormatException e) {
            outputView.setText("Please enter valid values.");
        }
    }

    // Method to display all student records
    private void showAllStudents() {
        Cursor cursor = dbHelper.getAllStudents();
        if (cursor != null && cursor.moveToFirst()) {
            StringBuilder sb = new StringBuilder();
            do {
                int roll_no = cursor.getInt(cursor.getColumnIndex(StudentDatabaseHelper.COLUMN_ROLL_NO));
                String name = cursor.getString(cursor.getColumnIndex(StudentDatabaseHelper.COLUMN_NAME));
                String address = cursor.getString(cursor.getColumnIndex(StudentDatabaseHelper.COLUMN_ADDRESS));
                double percentage = cursor.getDouble(cursor.getColumnIndex(StudentDatabaseHelper.COLUMN_PERCENTAGE));

                sb.append("Roll No: ").append(roll_no).append("\n");
                sb.append("Name: ").append(name).append("\n");
                sb.append("Address: ").append(address).append("\n");
                sb.append("Percentage: ").append(percentage).append("\n");
                sb.append("-----------------------------\n");
            } while (cursor.moveToNext());

            outputView.setText(sb.toString());
        } else {
            outputView.setText("No student records found.");
        }
    }
}
Step 3: Create the Layout File
Create a layout file (activity_main.xml) to define the UI elements needed to insert and display student records.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/roll_no_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Roll No"/>

    <EditText
        android:id="@+id/name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Name"/>

    <EditText
        android:id="@+id/address_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Address"/>

    <EditText
        android:id="@+id/percentage_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Percentage"
        android:inputType="numberDecimal"/>

    <Button
        android:id="@+id/insert_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Insert Student"/>

    <Button
        android:id="@+id/show_all_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Show All Students"/>

    <TextView
        android:id="@+id/output_view"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Output will be displayed here"
        android:paddingTop="16dp"/>

</LinearLayout>

--------------
Slip 2.

1]
Step 1: Create the Main Activity
Create an activity to handle user input and check if a number is a perfect number.

java

package com.example.perfectnumberapp;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText numberInput;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        numberInput = findViewById(R.id.number_input);
        Button checkButton = findViewById(R.id.check_button);

        checkButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkPerfectNumber();
            }
        });
    }

    // Function to determine if a number is a perfect number
    private boolean isPerfectNumber(int number) {
        if (number <= 1) {
            return false; // No perfect numbers less than or equal to 1
        }

        int sumOfDivisors = 0;
        // Find all divisors (excluding the number itself)
        for (int i = 1; i < number; i++) {
            if (number % i == 0) { // If it's a divisor
                sumOfDivisors += i;
            }
        }

        // Check if the sum of divisors equals the original number
        return sumOfDivisors == number;
    }

    // Function to check and display if the entered number is a perfect number
    private void checkPerfectNumber() {
        try {
            int number = Integer.parseInt(numberInput.getText().toString());
            boolean isPerfect = isPerfectNumber(number);

            if (isPerfect) {
                Toast.makeText(this, number + " is a perfect number!", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, number + " is NOT a perfect number.", Toast.LENGTH_SHORT).show();
            }
        } catch (NumberFormatException e) {
            Toast.makeText(this, "Please enter a valid integer.", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 2: Create the Layout File
Define a simple layout with a text box for user input and a button to trigger the perfect number check.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/number_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter a number"
        android:inputType="number"/>

    <Button
        android:id="@+id/check_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Check Perfect Number"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
This activity will contain the logic for performing arithmetic operations.

java

package com.example.calculatorapp;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText display; // This is the calculator's display
    private StringBuilder currentInput = new StringBuilder(); // To hold the current input
    private double firstOperand = 0;
    private String operation = ""; // Stores the current operation (+, -, *, /)

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        display = findViewById(R.id.display);
        display.setText(""); // Start with an empty display

        // Button click listeners for digits 0-9
        int[] digitButtons = {
                R.id.button0, R.id.button1, R.id.button2, R.id.button3, R.id.button4,
                R.id.button5, R.id.button6, R.id.button7, R.id.button8, R.id.button9
        };

        for (int id : digitButtons) {
            Button button = findViewById(id);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Button b = (Button) v;
                    currentInput.append(b.getText().toString());
                    display.setText(currentInput.toString());
                }
            });
        }

        // Set up operation buttons
        setOperationButton(R.id.button_add, "+");
        setOperationButton(R.id.button_subtract, "-");
        setOperationButton(R.id.button_multiply, "*");
        setOperationButton(R.id.button_divide, "/");

        // Equals button to perform the calculation
        Button equalsButton = findViewById(R.id.button_equals);
        equalsButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                double secondOperand = Double.parseDouble(currentInput.toString());
                double result = 0;

                switch (operation) {
                    case "+":
                        result = firstOperand + secondOperand;
                        break;
                    case "-":
                        result = firstOperand - secondOperand;
                        break;
                    case "*":
                        result = firstOperand * secondOperand;
                        break;
                    case "/":
                        if (secondOperand != 0) {
                            result = firstOperand / secondOperand;
                        } else {
                            display.setText("Error");
                            return; // Avoid division by zero
                        }
                        break;
                }

                display.setText(String.valueOf(result)); // Display the result
                currentInput = new StringBuilder(String.valueOf(result)); // Update current input
            }
        });

        // Clear button to reset the calculator
        Button clearButton = findViewById(R.id.button_clear);
        clearButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                currentInput = new StringBuilder();
                display.setText("");
                firstOperand = 0;
                operation = "";
            }
        });
    }

    private void setOperationButton(int buttonId, String op) {
        Button button = findViewById(buttonId);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (currentInput.length() > 0) {
                    firstOperand = Double.parseDouble(currentInput.toString());
                    operation = op;
                    currentInput = new StringBuilder();
                    display.setText(op); // Display the operation for feedback
                }
            }
        });
    }
}
Step 2: Create the Layout File
Create a simple calculator layout with buttons for digits, operations, and control elements.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/display"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:inputType="none" <!-- Disable keyboard input -->
        android:gravity="right" <!-- Align text to the right -->
        android:background="@android:color/white"
        android:textSize="24sp"
        android:padding="10dp"
        android:focusable="false"
        android:focusableInTouchMode="false"/>

    <GridLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:columnCount="4">

        <!-- First row: Digits 7, 8, 9, and Divide -->
        <Button
            android:id="@+id/button7"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="7"/>

        <Button
            android:id="@+id/button8"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="8"/>

        <Button
            android:id="@+id/button9"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="9"/>

        <Button
            android:id="@+id/button_divide"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="/"/>

        <!-- Second row: Digits 4, 5, 6, and Multiply -->
        <Button
            android:id="@+id/button4"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="4"/>

        <Button
            android:id="@+id/button5"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="5"/>

        <Button
            android:id="@+id/button6"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="6"/>

        <Button
            android:id="@+id/button_multiply"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="*"/>

        <!-- Third row: Digits 1, 2, 3, and Subtract -->
        <Button
            android:id="@+id/button1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="1"/>

        <Button
            android:id="@+id/button2"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="2"/>

        <Button
            android:id="@+id/button3"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="3"/>

        <Button
            android:id="@+id/button_subtract"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="-"/>

        <!-- Fourth row: Digits 0, Clear, Equals, and Add -->
        <Button
            android:id="@+id/button0"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="0"/>

        <Button
            android:id="@+id/button_clear"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="C"/>

        <Button
            android:id="@+id/button_equals"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="="/>

        <Button
            android:id="@+id/button_add"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="+"/>

    </GridLayout>

</LinearLayout>

---------------
Slip 3

1]
Step 1: Create the Main Activity
In this activity, you will handle user input, check if the entered number is an Armstrong number, and display the result.

java

package com.example.armstrongchecker;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText numberInput;
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        numberInput = findViewById(R.id.number_input);
        resultText = findViewById(R.id.result_text);

        Button checkButton = findViewById(R.id.check_button);
        checkButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkArmstrongNumber();
            }
        });
    }

    private void checkArmstrongNumber() {
        try {
            int number = Integer.parseInt(numberInput.getText().toString());
            boolean isArmstrong = isArmstrongNumber(number);

            if (isArmstrong) {
                resultText.setText(number + " is an Armstrong number.");
            } else {
                resultText.setText(number + " is NOT an Armstrong number.");
            }
        } catch (NumberFormatException e) {
            resultText.setText("Please enter a valid integer.");
        }
    }

    private boolean isArmstrongNumber(int number) {
        int originalNumber = number;
        int sum = 0;
        int numDigits = String.valueOf(number).length(); // Number of digits

        while (number > 0) {
            int digit = number % 10;
            sum += Math.pow(digit, numDigits); // Raise digit to the power of number of digits
            number /= 10;
        }

        return sum == originalNumber;
    }
}
Step 2: Create the Layout File
Create a simple layout with an EditText for user input, a button to trigger the check, and a TextView to display the result.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/number_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter a number"
        android:inputType="number"/>

    <Button
        android:id="@+id/check_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Check if Armstrong"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Result will be displayed here"
        android:textSize="16sp"
        android:paddingTop="16dp"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
The main activity manages user input and checks the phone number against the specified format.

java

package com.example.phonevalidator;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText phoneNumberInput;
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        phoneNumberInput = findViewById(R.id.phone_number_input);
        resultText = findViewById(R.id.result_text);

        Button checkButton = findViewById(R.id.check_button);
        checkButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkPhoneNumber();
            }
        });
    }

    // Function to check if the phone number has a valid area code and length
    private void checkPhoneNumber() {
        String phoneNumber = phoneNumberInput.getText().toString().trim();

        if (phoneNumber.isEmpty()) {
            resultText.setText("Please enter a phone number.");
            return;
        }

        if (isValidPhoneNumber(phoneNumber)) {
            resultText.setText("The phone number is valid.");
        } else {
            resultText.setText("The phone number is invalid.");
        }
    }

    // Function to validate the phone number format
    private boolean isValidPhoneNumber(String phoneNumber) {
        // Valid area codes
        String[] validAreaCodes = {"040", "041", "050", "0400", "044"};

        // Check if it starts with a valid area code
        boolean isValidAreaCode = false;
        for (String areaCode : validAreaCodes) {
            if (phoneNumber.startsWith(areaCode)) {
                isValidAreaCode = true;
                break;
            }
        }

        if (!isValidAreaCode) {
            return false;
        }

        // Check the length (total length should be between 9 and 11 digits)
        int minLength = 9; // 6 digits + 3-digit area code
        int maxLength = 11; // 8 digits + 3-digit area code

        int length = phoneNumber.length();
        return length >= minLength && length <= maxLength;
    }
}
Step 2: Create the Layout File
Design a simple layout with an EditText for user input, a button to check the phone number, and a TextView to display the result.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/phone_number_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter a phone number"
        android:inputType="phone"/>

    <Button
        android:id="@+id/check_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Check Phone Number"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Result will be displayed here"
        android:paddingTop="16dp"/>

</LinearLayout>

---------
Slip 4

1]
Step 1: Create the Main Activity
In this step, create an ImageSwitcher and configure it with the setFactory() method to define the ImageView instances it uses.

java

package com.example.imageswitcherexample;

import android.os.Bundle;
import android.view.View;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.ImageSwitcher;
import android.widget.ImageView;
import android.widget.ViewSwitcher;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private ImageSwitcher imageSwitcher;
    private int[] imageResources = {R.drawable.image1, R.drawable.image2, R.drawable.image3};
    private int currentIndex = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        imageSwitcher = findViewById(R.id.image_switcher);

        // Define the factory for creating ImageViews in the ImageSwitcher
        imageSwitcher.setFactory(new ViewSwitcher.ViewFactory() {
            @Override
            public View makeView() {
                ImageView imageView = new ImageView(MainActivity.this);
                imageView.setScaleType(ImageView.ScaleType.CENTER_CROP); // Set scaling
                imageView.setLayoutParams(new ImageSwitcher.LayoutParams(
                        ImageSwitcher.LayoutParams.MATCH_PARENT,
                        ImageSwitcher.LayoutParams.MATCH_PARENT));
                return imageView;
            }
        });

        // Set animations for image switching
        imageSwitcher.setInAnimation(AnimationUtils.loadAnimation(this, android.R.anim.fade_in));
        imageSwitcher.setOutAnimation(AnimationUtils.loadAnimation(this, android.R.anim.fade_out));

        // Set the initial image
        imageSwitcher.setImageResource(imageResources[currentIndex]);

        // Next button to switch to the next image
        Button nextButton = findViewById(R.id.next_button);
        nextButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                switchImage(1);
            }
        });

        // Previous button to switch to the previous image
        Button previousButton = findViewById(R.id.previous_button);
        previousButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                switchImage(-1);
            }
        });
    }

    // Method to switch between images
    private void switchImage(int direction) {
        currentIndex = (currentIndex + direction + imageResources.length) % imageResources.length;
        imageSwitcher.setImageResource(imageResources[currentIndex]);
    }
}
Step 2: Create the Layout File
Define the layout with an ImageSwitcher and control buttons for switching images.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <ImageSwitcher
        android:id="@+id/image_switcher"
        android:layout_width="match_parent"
        android:layout_height="300dp"
        android:layout_gravity="center"/>

    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <Button
            android:id="@+id/previous_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Previous"/>

        <Button
            android:id="@+id/next_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Next"/>

    </LinearLayout>

</LinearLayout>

2]
Step 1: Set Up Google Maps API Key
Follow Google's documentation on setting up the Google Maps API for Android: Google Maps Setup Guide.
Create a new project on Google Cloud Platform, enable Google Maps Android API, and generate an API key.
Add the API key to your AndroidManifest.xml.
xml

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.googlemapssearch">

    <application
        android:allowBackup="true"
        android:label="@string/app_name"
        android:theme="@style/Theme.GoogleMapsSearch">
        
        <!-- API Key for Google Maps -->
        <meta-data
            android:name="com.google.android.geo.API_KEY"
            android:value="YOUR_GOOGLE_MAPS_API_KEY"/>

        <!-- Main Activity with Map Fragment -->
        <activity
            android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
    </application>
</manifest>
Replace YOUR_GOOGLE_MAPS_API_KEY with the API key obtained from Google Cloud Platform.

Step 2: Create the Main Activity
This activity will contain a MapFragment to display Google Maps and an EditText for entering the search query.

java

package com.example.googlemapssearch;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.location.GeocoderApi;
import java.io.IOException;
import java.util.List;
import java.util.Locale;

public class MainActivity extends AppCompatActivity implements OnMapReadyCallback {

    private GoogleMap googleMap;
    private EditText searchBox;
    private Button searchButton;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        searchBox = findViewById(R.id.search_box);
        searchButton = findViewById(R.id.search_button);

        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);

        searchButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                searchLocation();
            }
        });
    }

    @Override
    public void onMapReady(GoogleMap map) {
        googleMap = map;

        // Initial location (e.g., San Francisco)
        LatLng initialLocation = new LatLng(37.7749, -122.4194);
        googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(initialLocation, 10));
    }

    private void searchLocation() {
        String location = searchBox.getText().toString();

        if (TextUtils.isEmpty(location)) {
            Toast.makeText(this, "Please enter a location to search.", Toast.LENGTH_SHORT).show();
            return;
        }

        // Use Geocoder to get latitude and longitude from location name
        Geocoder geocoder = new Geocoder(this, Locale.getDefault());
        try {
            List<Address> addresses = geocoder.getFromLocationName(location, 1);
            if (addresses != null && !addresses.isEmpty()) {
                Address address = addresses.get(0);
                LatLng latLng = new LatLng(address.getLatitude(), address.getLongitude());

                // Move the map to the location and add a marker
                googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 12));
                googleMap.addMarker(new MarkerOptions().position(latLng).title("Location: " + location));
            } else {
                Toast.makeText(this, "Location not found.", Toast.LENGTH_SHORT).show();
            }
        } catch (IOException e) {
            Toast.makeText(this, "Error while searching for location.", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 3: Create the Layout File
Define the layout with an EditText for the search box, a Button to trigger the search, and a MapFragment to display Google Maps.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <EditText
            android:id="@+id/search_box"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:hint="Enter location"/>

        <Button
            android:id="@+id/search_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Search"/>

    </LinearLayout>

    <fragment
        android:name="com.google.android.gms.maps.SupportMapFragment"
        android:id="@+id/map"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"/>

</LinearLayout>

---------
Slip 5.

1]
Step 1: Create the Main Activity
This activity creates a simple user interface with a button that, when clicked, displays an Alert Dialog.

java

package com.example.alertdialogdemo;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button showDialogButton = findViewById(R.id.show_dialog_button);

        showDialogButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showAlertDialog();
            }
        });
    }

    private void showAlertDialog() {
        // Create an AlertDialog.Builder to build the dialog
        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);

        // Set the dialog title
        builder.setTitle("Alert Dialog Example");

        // Set the dialog message
        builder.setMessage("This is a simple alert dialog demonstration.");

        // Set positive button with a click listener
        builder.setPositiveButton("OK", (dialog, which) -> {
            // Code to execute when "OK" is clicked
            dialog.dismiss(); // Dismiss the dialog
        });

        // Set negative button with a click listener
        builder.setNegativeButton("Cancel", (dialog, which) -> {
            // Code to execute when "Cancel" is clicked
            dialog.dismiss(); // Dismiss the dialog
        });

        // Set neutral button with a click listener
        builder.setNeutralButton("Help", (dialog, which) -> {
            // Code to execute when "Help" is clicked
            // For example, you might display additional information or perform some action
            dialog.dismiss();
        });

        // Create the AlertDialog and show it
        AlertDialog alertDialog = builder.create();
        alertDialog.show();
    }
}
Step 2: Create the Layout File
Design a simple layout with a button to trigger the alert dialog.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <Button
        android:id="@+id/show_dialog_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Show Alert Dialog"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
This activity handles user input, manages text formatting based on radio buttons and checkboxes, and performs button actions.

java

package com.example.textformatterapp;

import android.graphics.Color;
import android.graphics.Typeface;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText nameInput;
    private TextView displayLabel;
    private RadioGroup colorGroup;
    private CheckBox boldCheckBox, italicCheckBox, underlineCheckBox;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        nameInput = findViewById(R.id.name_input);
        displayLabel = findViewById(R.id.display_label);

        // RadioGroup for color selection
        colorGroup = findViewById(R.id.color_group);

        // CheckBoxes for text style
        boldCheckBox = findViewById(R.id.bold_checkbox);
        italicCheckBox = findViewById(R.id.italic_checkbox);
        underlineCheckBox = findViewById(R.id.underline_checkbox);

        // Button to display message
        Button displayButton = findViewById(R.id.display_button);
        displayButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                displayMessage();
            }
        });

        // Button to clear input and label
        Button clearButton = findViewById(R.id.clear_button);
        clearButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                clearText();
            }
        });

        // Button to exit the application
        Button exitButton = findViewById(R.id.exit_button);
        exitButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish(); // Exit the app
            }
        });
    }

    private void displayMessage() {
        String name = nameInput.getText().toString();
        if (name.isEmpty()) {
            displayLabel.setText("Please enter your name.");
            return;
        }

        String message = "Hello, " + name + "!";
        displayLabel.setText(message);

        // Set text style based on checkboxes
        int textStyle = Typeface.NORMAL;
        if (boldCheckBox.isChecked()) {
            textStyle |= Typeface.BOLD;
        }
        if (italicCheckBox.isChecked()) {
            textStyle |= Typeface.ITALIC;
        }

        displayLabel.setTypeface(null, textStyle);

        // Underline the text if the checkbox is checked
        if (underlineCheckBox.isChecked()) {
            displayLabel.setText(android.text.Html.fromHtml("<u>" + message + "</u>"));
        } else {
            displayLabel.setText(message); // reset text without underline
        }

        // Set text color based on the selected radio button
        int selectedColorId = colorGroup.getCheckedRadioButtonId();
        switch (selectedColorId) {
            case R.id.red_radio:
                displayLabel.setTextColor(Color.RED);
                break;
            case R.id.green_radio:
                displayLabel.setTextColor(Color.GREEN);
                break;
            case R.id.blue_radio:
                displayLabel.setTextColor(Color.BLUE);
                break;
            default:
                displayLabel.setTextColor(Color.BLACK);
                break;
        }
    }

    private void clearText() {
        nameInput.setText("");
        displayLabel.setText("");
        boldCheckBox.setChecked(false);
        italicCheckBox.setChecked(false);
        underlineCheckBox.setChecked(false);
        colorGroup.clearCheck(); // Clear radio button selection
    }
}
Step 2: Create the Layout File
Design the layout with the necessary components for text input, formatting options, and action buttons.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter your name"/>

    <RadioGroup
        android:id="@+id/color_group"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <RadioButton
            android:id="@+id/red_radio"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Red"/>

        <RadioButton
            android:id="@+id/green_radio"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Green"/>

        <RadioButton
            android:id="@+id/blue_radio"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Blue"/>

    </RadioGroup>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <CheckBox
            android:id="@+id/bold_checkbox"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Bold"/>

        <CheckBox
            android:id="@+id/italic_checkbox"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Italic"/>

        <CheckBox
            android:id="@+id/underline_checkbox"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Underline"/>

    </LinearLayout>

    <TextView
        android:id="@+id/display_label"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:textSize="20sp"/>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <Button
            android:id="@+id/display_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Display"/>

        <Button
            android:id="@+id/clear_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Clear"/>

        <Button
            android:id="@+id/exit_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Exit"/>

    </LinearLayout>

</LinearLayout>

---------
Slip 6

1]
Step 1: Create the Main Activity
This activity includes the logic to validate user input, handle the login attempt, and display appropriate error messages if validation fails.

java

package com.example.loginvalidation;

import android.os.Bundle;
import android.text.TextUtils;
import android.util.Patterns;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText emailInput;
    private EditText passwordInput;
    private TextView errorText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        emailInput = findViewById(R.id.email_input);
        passwordInput = findViewById(R.id.password_input);
        errorText = findViewById(R.id.error_text);

        Button loginButton = findViewById(R.id.login_button);
        loginButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                attemptLogin();
            }
        });
    }

    private void attemptLogin() {
        String email = emailInput.getText().toString().trim();
        String password = passwordInput.getText().toString().trim();

        if (!isEmailValid(email)) {
            errorText.setText("Invalid email address.");
            return;
        }

        if (!isPasswordValid(password)) {
            errorText.setText("Password must be at least 6 characters long.");
            return;
        }

        // If validation passes
        errorText.setText("Login successful!");
    }

    private boolean isEmailValid(String email) {
        return !TextUtils.isEmpty(email) && Patterns.EMAIL_ADDRESS.matcher(email).matches();
    }

    private boolean isPasswordValid(String password) {
        return password.length() >= 6;
    }
}
Step 2: Create the Layout File
Design the layout for the login form with input fields for email and password, a login button, and a text view for displaying error messages.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <TextView
        android:text="Login Form"
        android:textSize="24sp"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:gravity="center_horizontal"
        android:paddingBottom="16dp"/>

    <EditText
        android:id="@+id/email_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Email Address"
        android:inputType="textEmailAddress"/>

    <EditText
        android:id="@+id/password_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Password"
        android:inputType="textPassword"/>

    <Button
        android:id="@+id/login_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Login"/>

    <TextView
        android:id="@+id/error_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text=""
        android:textColor="@android:color/holo_red_light"
        android:paddingTop="16dp"/>

</LinearLayout>

2]
Step 1: Set Up Google Maps API Key
To use Google Maps in your Android app, you need to set up an API key.

Follow the Google Maps API setup guide.
Create a project on Google Cloud Platform and enable the Google Maps Android API.
Generate an API key and add it to your Android project.
In your AndroidManifest.xml, include the API key as meta-data:

xml

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.locationsearcher">

    <application
        android:allowBackup="true"
        android:label="@string/app_name"
        android:theme="@style/Theme.LocationSearcher">

        <!-- Google Maps API Key -->
        <meta-data
            android:name="com.google.android.geo.API_KEY"
            android:value="YOUR_GOOGLE_MAPS_API_KEY"/>

        <!-- Main Activity -->
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>

    </application>
</manifest>
Replace YOUR_GOOGLE_MAPS_API_KEY with your Google Maps API key.

Step 2: Create the Main Activity
Implement an activity with a SupportMapFragment to display Google Maps and an EditText for user input to search for locations.

java

package com.example.locationsearcher;

import android.location.Address;
import android.location.Geocoder;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import java.io.IOException;
import java.util.List;
import java.util.Locale;

public class MainActivity extends AppCompatActivity implements OnMapReadyCallback {

    private GoogleMap googleMap;
    private EditText locationInput;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        locationInput = findViewById(R.id.location_input);

        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map_fragment);
        mapFragment.getMapAsync(this);

        Button searchButton = findViewById(R.id.search_button);
        searchButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                searchLocation();
            }
        });
    }

    @Override
    public void onMapReady(GoogleMap map) {
        this.googleMap = map;

        // Set an initial location and zoom level (e.g., San Francisco)
        LatLng initialLocation = new LatLng(37.7749, -122.4194);
        googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(initialLocation, 10));
    }

    private void searchLocation() {
        String locationName = locationInput.getText().toString().trim();

        if (locationName.isEmpty()) {
            Toast.makeText(this, "Please enter a location to search.", Toast.LENGTH_SHORT).show();
            return;
        }

        Geocoder geocoder = new Geocoder(this, Locale.getDefault());
        try {
            List<Address> addresses = geocoder.getFromLocationName(locationName, 1);
            if (addresses != null && !addresses.isEmpty()) {
                Address address = addresses.get(0);
                LatLng latLng = new LatLng(address.getLatitude(), address.getLongitude());

                googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 12));
                googleMap.addMarker(new MarkerOptions().position(latLng).title("Location: " + locationName));
            } else {
                Toast.makeText(this, "Location not found.", Toast.LENGTH_SHORT).show();
            }
        } catch (IOException e) {
            Toast.makeText(this, "Error occurred while searching for location.", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 3: Create the Layout File
Define the layout with a SupportMapFragment, an EditText for location input, and a Button to trigger the search.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/location_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter location to search"/>

    <Button
        android:id="@+id/search_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Search"/>

    <fragment
        android:name="com.google.android.gms.maps.SupportMapFragment"
        android:id="@+id/map_fragment"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"/>

</LinearLayout>

---------
Slip 7

1]
Step 1: Create the Main Activity
In this step, we'll create an activity that demonstrates an indeterminate progress bar and a determinate progress bar. We'll simulate a long-running task with a background thread to update the determinate progress bar.

java

package com.example.progressbardemo;

import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private ProgressBar indeterminateProgressBar;
    private ProgressBar determinateProgressBar;
    private TextView progressText;
    private Handler handler = new Handler();
    private int progress = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        indeterminateProgressBar = findViewById(R.id.indeterminate_progress_bar);
        determinateProgressBar = findViewById(R.id.determinate_progress_bar);
        progressText = findViewById(R.id.progress_text);

        // Button to start a task with indeterminate progress bar
        Button startIndeterminateButton = findViewById(R.id.start_indeterminate_button);
        startIndeterminateButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startIndeterminateTask();
            }
        });

        // Button to start a task with determinate progress bar
        Button startDeterminateButton = findViewById(R.id.start_determinate_button);
        startDeterminateButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startDeterminateTask();
            }
        });
    }

    // Simulate an indeterminate task
    private void startIndeterminateTask() {
        indeterminateProgressBar.setVisibility(View.VISIBLE);

        // Simulate a long-running task using a handler to delay hiding the progress bar
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                indeterminateProgressBar.setVisibility(View.GONE);
            }
        }, 3000); // Simulate a 3-second task
    }

    // Simulate a determinate task with progress updates
    private void startDeterminateTask() {
        progress = 0; // Reset progress
        determinateProgressBar.setProgress(progress);
        determinateProgressBar.setVisibility(View.VISIBLE);

        new Thread(new Runnable() {
            @Override
            public void run() {
                while (progress < 100) {
                    progress += 10; // Increment progress

                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            determinateProgressBar.setProgress(progress);
                            progressText.setText("Progress: " + progress + "%");
                        }
                    });

                    try {
                        Thread.sleep(500); // Simulate time delay between progress updates
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

                // Hide progress bar and reset text when complete
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        determinateProgressBar.setVisibility(View.GONE);
                        progressText.setText("Task complete!");
                    }
                });
            }
        }).start();
    }
}
Step 2: Create the Layout File
This layout will have a button to start an indeterminate task and another button to start a determinate task, with progress bars and a text view to indicate progress.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <Button
        android:id="@+id/start_indeterminate_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Start Indeterminate Task"/>

    <ProgressBar
        android:id="@+id/indeterminate_progress_bar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:visibility="gone" <!-- Initially hidden -->
        android:indeterminate="true"/> <!-- Indeterminate mode -->

    <Button
        android:id="@+id/start_determinate_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Start Determinate Task"/>

    <ProgressBar
        android:id="@+id/determinate_progress_bar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:visibility="gone"/> <!-- Initially hidden -->

    <TextView
        android:id="@+id/progress_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text=""/>

</LinearLayout>

2]
Step 1: Create the Database Helper
This class manages the creation and operations of the SQLite database.

java

package com.example.employeemanagement;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class EmployeeDatabaseHelper extends SQLiteOpenHelper {

    private static final String DATABASE_NAME = "EmployeeDatabase";
    private static final int DATABASE_VERSION = 1;

    private static final String TABLE_EMPLOYEE = "Employee";
    private static final String COLUMN_E_ID = "E_id";
    private static final String COLUMN_NAME = "name";
    private static final String COLUMN_ADDRESS = "address";
    private static final String COLUMN_PH_NO = "ph_no";

    public EmployeeDatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // Create the Employee table
        String createTableQuery = "CREATE TABLE " + TABLE_EMPLOYEE + " (" +
                COLUMN_E_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_NAME + " TEXT, " +
                COLUMN_ADDRESS + " TEXT, " +
                COLUMN_PH_NO + " TEXT)";
        db.execSQL(createTableQuery);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_EMPLOYEE);
        onCreate(db);
    }

    // Insert a new employee record
    public boolean insertEmployee(String name, String address, String ph_no) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(COLUMN_NAME, name);
        values.put(COLUMN_ADDRESS, address);
        values.put(COLUMN_PH_NO, ph_no);

        long result = db.insert(TABLE_EMPLOYEE, null, values);
        return result != -1; // Returns true if insertion was successful
    }

    // Retrieve all employee records
    public Cursor getAllEmployees() {
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT * FROM " + TABLE_EMPLOYEE;
        return db.rawQuery(query, null);
    }
}
Step 2: Create the Main Activity
This activity handles user input for inserting new employees and displays all employee records.

java

package com.example.employeemanagement;

import android.database.Cursor;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EmployeeDatabaseHelper dbHelper;
    private EditText nameInput, addressInput, phNoInput;
    private TextView resultView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        dbHelper = new EmployeeDatabaseHelper(this);

        nameInput = findViewById(R.id.name_input);
        addressInput = findViewById(R.id.address_input);
        phNoInput = findViewById(R.id.ph_no_input);

        Button insertButton = findViewById(R.id.insert_button);
        Button showAllButton = findViewById(R.id.show_all_button);

        resultView = findViewById(R.id.result_view);

        insertButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                insertEmployee();
            }
        });

        showAllButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showAllEmployees();
            }
        });
    }

    private void insertEmployee() {
        String name = nameInput.getText().toString();
        String address = addressInput.getText().toString();
        String ph_no = phNoInput.getText().toString();

        if (dbHelper.insertEmployee(name, address, ph_no)) {
            resultView.setText("Employee inserted successfully.");
        } else {
            resultView.setText("Error inserting employee.");
        }
    }

    private void showAllEmployees() {
        Cursor cursor = dbHelper.getAllEmployees();
        if (cursor != null && cursor.moveToFirst()) {
            StringBuilder sb = new StringBuilder();
            do {
                int e_id = cursor.getInt(cursor.getColumnIndex(EmployeeDatabaseHelper.COLUMN_E_ID));
                String name = cursor.getString(cursor.getColumnIndex(EmployeeDatabaseHelper.COLUMN_NAME));
                String address = cursor.getString(cursor.getColumnIndex(EmployeeDatabaseHelper.COLUMN_ADDRESS));
                String ph_no = cursor.getString(cursor.getColumnIndex(EmployeeDatabaseHelper.COLUMN_PH_NO));

                sb.append("Employee ID: ").append(e_id).append("\n");
                sb.append("Name: ").append(name).append("\n");
                sb.append("Address: ").append(address).append("\n");
                sb.append("Phone Number: ").append(ph_no).append("\n");
                sb.append("----------------------------\n");
            } while (cursor.moveToNext());

            resultView.setText(sb.toString());
        } else {
            resultView.setText("No employee records found.");
        }
    }
}
Step 3: Create the Layout File
Design a layout that includes input fields for employee details, buttons to insert and display employee records, and a text view to display results.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter employee name"/>

    <EditText
        android:id="@+id/address_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter employee address"/>

    <EditText
        android:id="@+id/ph_no_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter employee phone number"/>

    <Button
        android:id="@+id/insert_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Insert Employee"/>

    <Button
        android:id="@+id/show_all_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Show All Employees"/>

    <TextView
        android:id="@+id/result_view"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text=""
        android:paddingTop="16dp"/>

</LinearLayout>

---------
Slip 8

1]
Step 1: Create the Main Activity
In this step, we'll implement the methods that represent the activity life cycle, such as onCreate, onStart, onResume, onPause, onStop, onRestart, and onDestroy. Each method will contain code to show a toast and log a message to help visualize the life cycle.

java

package com.example.activitylifecycle;

import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "ActivityLifeCycle";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toast.makeText(this, "onCreate called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onCreate called");
    }

    @Override
    protected void onStart() {
        super.onStart();
        Toast.makeText(this, "onStart called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onStart called");
    }

    @Override
    protected void onResume() {
        super.onResume();
        Toast.makeText(this, "onResume called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onResume called");
    }

    @Override
    protected void onPause() {
        super.onPause();
        Toast.makeText(this, "onPause called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onPause called");
    }

    @Override
    protected void onStop() {
        super.onStop();
        Toast.makeText(this, "onStop called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onStop called");
    }

    @Override
    protected void onRestart() {
        super.onRestart();
        Toast.makeText(this, "onRestart called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onRestart called");
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Toast.makeText(this, "onDestroy called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onDestroy called");
    }
}
Step 2: Create the Layout File
The layout can be simple, as the primary focus is on the life cycle methods. However, you can include a basic text view to give the activity some content.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Activity Life Cycle Demo"
        android:textSize="24sp"/>

</LinearLayout>

2]
Step 1: Define the Database Schema and Helper Class
The database helper class manages the SQLite database, including creating the Customer table and providing methods for inserting records and querying customer details.

java

package com.example.customerapp;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class CustomerDatabaseHelper extends SQLiteOpenHelper {

    // Constants for the database name, version, and table structure
    private static final String DATABASE_NAME = "CustomerDatabase";
    private static final int DATABASE_VERSION = 1;

    private static final String TABLE_CUSTOMER = "Customer";
    private static final String COLUMN_ID = "id";
    private static final String COLUMN_NAME = "name";
    private static final String COLUMN_ADDRESS = "address";
    private static = final String COLUMN_PH_NO = "ph_no";

    public CustomerDatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // Create the Customer table
        String createTableQuery = "CREATE TABLE " + TABLE_CUSTOMER + " (" +
                COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_NAME + " TEXT, " +
                COLUMN_ADDRESS + " TEXT, " +
                COLUMN_PH_NO + " TEXT)";
        db.execSQL(createTableQuery);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // Drop the table and recreate if the database is upgraded
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_CUSTOMER);
        onCreate(db);
    }

    // Insert a new customer record
    public boolean insertCustomer(String name, String address, String ph_no) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(COLUMN_NAME, name);
        values.put(COLUMN_ADDRESS, address);
        values.put(COLUMN_PH_NO, ph_no);

        long result = db.insert(TABLE_CUSTOMER, null, values);
        return result != -1; // Returns true if insertion was successful
    }

    // Retrieve all customer records
    public Cursor getAllCustomers() {
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT * FROM " + TABLE_CUSTOMER;
        return db.rawQuery(query, null);
    }
}
Step 2: Create the Main Activity
This activity allows you to insert new customer details and show all customer details.

java

package com.example.customerapp;

import android.database.Cursor;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private CustomerDatabaseHelper dbHelper;
    private EditText nameInput, addressInput, phNoInput;
    private TextView resultView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        dbHelper = new CustomerDatabaseHelper(this);

        nameInput = findViewById(R.id.name_input);
        addressInput = findViewById(R.id.address_input);
        phNoInput = findViewById(R.id.ph_no_input);

        resultView = findViewById(R.id.result_view);

        // Insert button to insert new customer details
        Button insertButton = findViewById(R.id.insert_button);
        insertButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                insertCustomer();
            }
        });

        // Show button to display all customer details
        Button showAllButton = findViewById(R.id.show_all_button);
        showAllButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showAllCustomers();
            }
        });
    }

    private void insertCustomer() {
        String name = nameInput.getText().toString();
        String address = addressInput.getText().toString();
        String ph_no = phNoInput.getText().toString();

        if (name.isEmpty() || address.isEmpty() || ph_no.isEmpty()) {
            resultView.setText("Please fill in all fields.");
            return;
        }

        if (dbHelper.insertCustomer(name, address, ph_no)) {
            resultView.setText("Customer inserted successfully.");
            // Clear input fields after insertion
            nameInput.setText("");
            addressInput.setText("");
            phNoInput.setText("");
        } else {
            resultView.setText("Error inserting customer.");
        }
    }

    private void showAllCustomers() {
        Cursor cursor = dbHelper.getAllCustomers();
        if (cursor != null && cursor.moveToFirst()) {
            StringBuilder sb = new StringBuilder();
            do {
                int id = cursor.getInt(cursor.getColumnIndex(CustomerDatabaseHelper.COLUMN_ID));
                String name = cursor.getString(cursor.getColumnIndex(CustomerDatabaseHelper.COLUMN_NAME));
                String address = cursor.getString(cursor.getColumnIndex(CustomerDatabaseHelper.COLUMN_ADDRESS));
                String ph_no = cursor.getString(cursor.getColumnIndex(CustomerDatabaseHelper.COLUMN_PH_NO));

                sb.append("Customer ID: ").append(id).append("\n");
                sb.append("Name: ").append(name).append("\n");
                sb.append("Address: ").append(address).append("\n");
                sb.append("Phone Number: ").append(ph_no).append("\n");
                sb.append("---------------------------\n");
            } while (cursor.moveToNext());

            resultView.setText(sb.toString());
        } else {
            resultView.setText("No customer records found.");
        }
    }
}
Step 3: Create the Layout File
Define a layout with fields for customer details, buttons to insert and display records, and a text view for results.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter customer name"/>

    <EditText
        android:id="@+id/address_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter customer address"/>

    <EditText
        android:id="@+id/ph_no_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter customer phone number"/>

    <Button
        android:id="@+id/insert_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Insert Customer"/>

    <Button
        android:id="@+id/show_all_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Show All Customers"/>

    <TextView
        android:id="@+id/result_view"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text=""
        android:paddingTop="16dp"/>

</LinearLayout>

---------
Slip 9

1]
Step 1: Create the Main Activity
The main activity will handle user input and determine if the given number is a palindrome.

java

package com.example.palindromechecker;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText numberInput;
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        numberInput = findViewById(R.id.getnum);
        resultText = findViewById(R.id.result_text);

        Button checkButton = findViewById(R.id.check_button);
        checkButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkPalindrome();
            }
        });
    }

    private void checkPalindrome() {
        String numberString = numberInput.getText().toString().trim();

        if (TextUtils.isEmpty(numberString)) {
            resultText.setText("Please enter a number.");
            return;
        }

        if (isPalindrome(numberString)) {
            resultText.setText(numberString + " is a palindrome.");
        } else {
            resultText.setText(numberString + " is NOT a palindrome.");
        }
    }

    private boolean isPalindrome(String str) {
        int left = 0;
        int right = str.length() - 1;

        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }

        return true;
    }
}
Step 2: Create the Layout File
Design a simple layout with an EditText for user input, a Button to trigger the check, and a TextView to display the result.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/getnum"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter a number"/>

    <Button
        android:id="@+id/check_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Check"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:text="Result will be displayed here"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
This activity will handle user input, arithmetic operations, and updating the display.

java

package com.example.simplecalculator;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private TextView display;
    private StringBuilder currentInput;
    private double firstOperand;
    private String operation;
    private boolean isOperationJustClicked;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        display = findViewById(R.id.display);
        currentInput = new StringBuilder();

        int[] digitButtons = {
                R.id.button0, R.id.button1, R.id.button2, R.id.button3, R.id.button4,
                R.id.button5, R.id.button6, R.id.button7, R.id.button8, R.id.button9
        };

        for (int id : digitButtons) {
            Button button = findViewById(id);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (isOperationJustClicked) {
                        currentInput.setLength(0);
                        isOperationJustClicked = false;
                    }
                    currentInput.append(((Button) v).getText().toString());
                    display.setText(currentInput.toString());
                }
            });
        }

        setOperationButton(R.id.button_add, "+");
        setOperationButton(R.id.button_subtract, "-");
        setOperationButton(R.id.button_multiply, "*");
        setOperationButton(R.id.button_divide, "/");

        Button equalsButton = findViewById(R.id.button_equals);
        equalsButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (operation != null && currentInput.length() > 0) {
                    double secondOperand = Double.parseDouble(currentInput.toString());
                    double result = 0;

                    switch (operation) {
                        case "+":
                            result = firstOperand + secondOperand;
                            break;
                        case "-":
                            result = firstOperand - secondOperand;
                            break;
                        case "*":
                            result = firstOperand * secondOperand;
                            break;
                        case "/":
                            if (secondOperand != 0) {
                                result = firstOperand / secondOperand;
                            } else {
                                display.setText("Error");
                                return; // Avoid division by zero
                            }
                            break;
                    }

                    display.setText(String.valueOf(result));
                    currentInput = new StringBuilder(String.valueOf(result));
                    operation = null; // Clear operation after calculation
                    isOperationJustClicked = true;
                }
            }
        });

        Button clearButton = findViewById(R.id.button_clear);
        clearButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                currentInput.setLength(0);
                display.setText("");
                firstOperand = 0;
                operation = null;
                isOperationJustClicked = false;
            }
        });
    }

    private void setOperationButton(int buttonId, String op) {
        Button button = findViewById(buttonId);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (currentInput.length() > 0) {
                    firstOperand = Double.parseDouble(currentInput.toString());
                    operation = op;
                    isOperationJustClicked = true;
                }
            }
        });
    }
}
Step 2: Create the Layout File
Design the calculator's user interface with buttons for digits, operations, and controls.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <TextView
        android:id="@+id/display"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:inputType="none"
        android:gravity="right"
        android:textSize="24sp"
        android:padding="10dp"/>

    <GridLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:columnCount="4">

        <!-- First row: 7, 8, 9, Divide -->
        <Button
            android:id="@+id/button7"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="7"/>

        <Button
            android:id="@+id/button8"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="8"/>

        <Button
            android:id="@+id/button9"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="9"/>

        <Button
            android:id="@+id/button_divide"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="/"/>

        <!-- Second row: 4, 5, 6, Multiply -->
        <Button
            android:id="@+id/button4"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="4"/>

        <Button
            android:id="@+id/button5"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="5"/>

        <Button
            android:id="@+id/button6"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="6"/>

        <Button
            android:id="@+id/button_multiply"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="*"/>

        <!-- Third row: 1, 2, 3, Subtract -->
        <Button
            android:id="@+id/button1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="1"/>

        <Button
            android:id="@+id/button2"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="2"/>

        <Button
            android:id="@+id/button3"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="3"/>

        <Button
            android:id="@+id/button_subtract"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="-"/>

        <!-- Fourth row: 0, Clear, Equals, Add -->
        <Button
            android:id="@+id/button0"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="0"/>

        <Button
            android:id="@+id/button_clear"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="C"/>

        <Button
            android:id="@+id/button_equals"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="="/>

        <Button
            android:id="@+id/button_add"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="+"/>

    </GridLayout>

</LinearLayout>

---------
Slip 10

1]
Step 1: Create the Main Activity
In this activity, we implement the logic to check if the given number is an Armstrong number and display the result using Toast.

java

package com.example.armstrongchecker;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText numberInput;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        numberInput = findViewById(R.id.getnum); // Text box to enter the number

        Button checkButton = findViewById(R.id.check_button); // Button to initiate the check
        checkButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkArmstrong();
            }
        });
    }

    private void checkArmstrong() {
        String numberStr = numberInput.getText().toString();

        if (TextUtils.isEmpty(numberStr)) {
            Toast.makeText(this, "Please enter a number.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            int number = Integer.parseInt(numberStr); // Convert the input to an integer

            if (isArmstrong(number)) {
                Toast.makeText(this, number + " is an Armstrong number.", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, number + " is NOT an Armstrong number.", Toast.LENGTH_SHORT).show();
            }
        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid input. Please enter a valid number.", Toast.LENGTH_SHORT).show();
        }
    }

    private boolean isArmstrong(int number) {
        int originalNumber = number;
        int sum = 0;
        int numDigits = String.valueOf(number).length(); // Get the number of digits

        while (number > 0) {
            int digit = number % 10; // Extract the last digit
            sum += Math.pow(digit, numDigits); // Add the power of the digit
            number /= 10; // Remove the last digit
        }

        return sum == originalNumber; // True if the sum equals the original number
    }
}
Step 2: Create the Layout File
Design the layout with an EditText for user input and a Button to check whether the entered number is an Armstrong number.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/getnum"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter a number"/>

    <Button
        android:id="@+id/check_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Check"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
In this step, you'll create an activity that includes the logic for adding and removing items from the spinner.

java

package com.example.spinnermanagement;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    private EditText itemInput;
    private Spinner itemSpinner;
    private ArrayAdapter<String> spinnerAdapter;
    private ArrayList<String> itemList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        itemInput = findViewById(R.id.item_input); // Text input for entering items
        itemSpinner = findViewById(R.id.item_spinner); // Spinner for displaying items

        itemList = new ArrayList<>(); // List to hold spinner items
        spinnerAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, itemList);
        spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        itemSpinner.setAdapter(spinnerAdapter);

        // Button to add an item to the spinner
        Button addButton = findViewById(R.id.add_button);
        addButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                addItemToSpinner();
            }
        });

        // Button to remove the selected item from the spinner
        Button removeButton = findViewById(R.id.remove_button);
        removeButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                removeItemFromSpinner();
            }
        });
    }

    // Adds a new item to the spinner
    private void addItemToSpinner() {
        String item = itemInput.getText().toString().trim();

        if (TextUtils.isEmpty(item)) {
            Toast.makeText(this, "Please enter an item.", Toast.LENGTH_SHORT).show();
            return;
        }

        if (!itemList.contains(item)) {
            itemList.add(item); // Add to list
            spinnerAdapter.notifyDataSetChanged(); // Update spinner
            itemInput.setText(""); // Clear input
            Toast.makeText(this, "Item added.", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "Item already exists in the spinner.", Toast.LENGTH_SHORT).show();
        }
    }

    // Removes the selected item from the spinner
    private void removeItemFromSpinner() {
        String selectedItem = (String) itemSpinner.getSelectedItem();

        if (selectedItem != null) {
            itemList.remove(selectedItem); // Remove from list
            spinnerAdapter.notifyDataSetChanged(); // Update spinner
            Toast.makeText(this, "Item removed.", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "No item selected to remove.", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 2: Create the Layout File
Design a layout with a text input for entering items, a spinner, and buttons to add or remove items.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/item_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter item"/>

    <Button
        android:id="@+id/add_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Add to Spinner"/>

    <Button
        android:id="@+id/remove_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Remove from Spinner"/>

    <Spinner
        android:id="@+id/item_spinner"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>

</LinearLayout>

---------
Slip 11

1]
Step 1: Create the Main Activity
This activity takes two numbers as input, calculates power and average based on the button clicked, and sends the results to the second activity.

java

package com.example.calculationsapp;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText number1Input;
    private EditText number2Input;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        number1Input = findViewById(R.id.number1_input);
        number2Input = findViewById(R.id.number2_input);

        Button powerButton = findViewById(R.id.power_button);
        Button averageButton = findViewById(R.id.average_button);

        powerButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                calculatePower();
            }
        });

        averageButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                calculateAverage();
            }
        });
    }

    private void calculatePower() {
        String num1Str = number1Input.getText().toString();
        String num2Str = number2Input.getText().toString();

        if (TextUtils.isEmpty(num1Str) || TextUtils.isEmpty(num2Str)) {
            Toast.makeText(this, "Please enter both numbers.", Toast.LENGTH_SHORT).show();
            return;
        }

        double num1 = Double.parseDouble(num1Str);
        double num2 = Double.parseDouble(num2Str);
        double result = Math.pow(num1, num2);

        Intent intent = new Intent(this, ResultActivity.class);
        intent.putExtra("result", "Power: " + result);
        startActivity(intent);
    }

    private void calculateAverage() {
        String num1Str = number1Input.getText().toString();
        String num2Str = number2Input.getText().toString();

        if (TextUtils.isEmpty(num1Str) || TextUtils.isEmpty(num2Str)) {
            Toast.makeText(this, "Please enter both numbers.", Toast.LENGTH_SHORT).show();
            return;
        }

        double num1 = Double.parseDouble(num1Str);
        double num2 = Double.parseDouble(num2Str);
        double result = (num1 + num2) / 2;

        Intent intent = new Intent(this, ResultActivity.class);
        intent.putExtra("result", "Average: " + result);
        startActivity(intent);
    }
}
Step 2: Create the Result Activity
This activity receives the result from the main activity and displays it.

java

package com.example.calculationsapp;

import android.os.Bundle;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class ResultActivity extends AppCompatActivity {

    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_result);

        resultText = findViewById(R.id.result_text);

        // Retrieve the result from the intent and display it
        String result = getIntent().getStringExtra("result");
        resultText.setText(result);
    }
}
Step 3: Create Layout Files
Layout for Main Activity (activity_main.xml)
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/number1_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter first number"/>

    <EditText
        android:id="@+id/number2_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter second number"/>

    <Button
        android:id="@+id/power_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Calculate Power"/>

    <Button
        android:id="@+id/average_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Calculate Average"/>

</LinearLayout>
Layout for Result Activity (activity_result.xml)
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center">

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="24sp"
        android:gravity="center"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
This activity takes a string input, applies the selected operation, and displays the result.

java

package com.example.stringoperations;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText stringInput;
    private RadioGroup operationGroup;
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        stringInput = findViewById(R.id.string_input); // Text input for entering a string
        operationGroup = findViewById(R.id.operation_group); // Group of radio buttons for selecting an operation
        resultText = findViewById(R.id.result_text); // TextView to display the result

        Button performButton = findViewById(R.id.perform_button); // Button to trigger the operation
        performButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                performStringOperation();
            }
        });
    }

    private void performStringOperation() {
        String input = stringInput.getText().toString().trim();

        if (TextUtils.isEmpty(input)) {
            Toast.makeText(this, "Please enter a string.", Toast.LENGTH_SHORT).show();
            return;
        }

        int selectedOperationId = operationGroup.getCheckedRadioButtonId(); // Get the selected radio button
        RadioButton selectedOperation = findViewById(selectedOperationId);

        String result;

        switch (selectedOperation.getText().toString()) {
            case "Reverse":
                result = new StringBuilder(input).reverse().toString(); // Reverse the string
                break;
            case "Uppercase":
                result = input.toUpperCase(); // Convert to uppercase
                break;
            case "Length":
                result = "Length: " + input.length(); // Get the string length
                break;
            default:
                result = "No operation selected.";
                break;
        }

        resultText.setText(result); // Display the result
    }
}
Step 2: Create the Layout File
This layout includes a text input for user input, a group of radio buttons for selecting an operation, and a button to trigger the operation.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/string_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter a string"/>

    <RadioGroup
        android:id="@+id/operation_group"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <RadioButton
            android:id="@+id/radio_reverse"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Reverse"/>

        <RadioButton
            android:id="@+id/radio_uppercase"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Uppercase"/>

        <RadioButton
            android:id="@+id/radio_length"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Length"/>

    </RadioGroup>

    <Button
        android:id="@+id/perform_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Perform Operation"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:text="Result will be displayed here"/>

</LinearLayout>
---------
Slip 12

1]
package com.example.lightbulbapp;

import android.os.Bundle;
import android.widget.ImageView;
import android.widget.ToggleButton;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private ImageView lightbulbImage;
    private ToggleButton toggleButton;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        lightbulbImage = findViewById(R.id.lightbulb_image); // ImageView to display the lightbulb
        toggleButton = findViewById(R.id.toggle_button); // ToggleButton to switch between ON and OFF states

        // Set initial state
        lightbulbImage.setImageResource(R.drawable.lightbulb_off); // Set the default image to OFF

        // Handle toggle button state changes
        toggleButton.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                // If the toggle button is checked, set the lightbulb to ON
                lightbulbImage.setImageResource(R.drawable.lightbulb_on);
            } else {
                // If the toggle button is unchecked, set the lightbulb to OFF
                lightbulbImage.setImageResource(R.drawable.lightbulb_off);
            }
        });
    }
}
Step 3: Create the Layout File
Design the layout with an ImageView to represent the lightbulb and a ToggleButton to control the state.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <ImageView
        android:id="@+id/lightbulb_image"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:src="@drawable/lightbulb_off" /> <!-- Default to OFF -->

    <ToggleButton
        android:id="@+id/toggle_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textOn="Lightbulb ON"
        android:textOff="Lightbulb OFF" />
        
</LinearLayout>
2]
Step 1: Create the Main Activity
In this activity, you'll manage user input, handle radio buttons and checkboxes, and define button actions.

java

package com.example.messageformatter;

import android.graphics.Color;
import android.graphics.Typeface;
import android.os.Bundle;
import android.text.Html;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText nameInput;
    private TextView displayLabel;
    private RadioGroup colorGroup;
    private CheckBox boldCheckBox, italicCheckBox, underlineCheckBox;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        nameInput = findViewById(R.id.name_input);
        displayLabel = findViewById(R.id.display_label);

        colorGroup = findViewById(R.id.color_group); // Radio buttons for text color

        boldCheckBox = findViewById(R.id.bold_checkbox);
        italicCheckBox = findViewById(R.id.italic_checkbox);
        underlineCheckBox = findViewById(R.id.underline_checkbox);

        Button displayButton = findViewById(R.id.display_button); // Display the message
        displayButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                displayMessage();
            }
        });

        Button clearButton = findViewById(R.id.clear_button); // Clear the input and label
        clearButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                clearText();
            }
        });

        Button exitButton = findViewById(R.id.exit_button); // Exit the application
        exitButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish(); // Close the activity
            }
        });
    }

    private void displayMessage() {
        String name = nameInput.getText().toString().trim();

        if (name.isEmpty()) {
            displayLabel.setText("Please enter your name.");
            return;
        }

        String message = "Hello, " + name + "!";

        // Set text style based on checkboxes
        int textStyle = Typeface.NORMAL;
        if (boldCheckBox.isChecked()) {
            textStyle |= Typeface.BOLD;
        }
        if (italicCheckBox.isChecked()) {
            textStyle |= Typeface.ITALIC;
        }

        displayLabel.setTypeface(null, textStyle);

        // Underline the text if the checkbox is checked
        if (underlineCheckBox.isChecked()) {
            displayLabel.setText(Html.fromHtml("<u>" + message + "</u>"));
        } else {
            displayLabel.setText(message); // Reset text without underline
        }

        // Set text color based on the selected radio button
        int selectedColorId = colorGroup.getCheckedRadioButtonId();
        switch (selectedColorId) {
            case R.id.red_radio:
                displayLabel.setTextColor(Color.RED);
                break;
            case R.id.green_radio:
                displayLabel.setTextColor(Color.GREEN);
                break;
            case R.id.blue_radio:
                displayLabel.setTextColor(Color.BLUE);
                break;
            default:
                displayLabel.setTextColor(Color.BLACK); // Default color
                break;
        }
    }

    private void clearText() {
        nameInput.setText(""); // Clear the text input
        displayLabel.setText(""); // Clear the label
        boldCheckBox.setChecked(false);
        italicCheckBox.setChecked(false);
        underlineCheckBox.setChecked(false);
        colorGroup.clearCheck(); // Clear the radio button selection
    }
}
Step 2: Create the Layout File
Design the layout with an EditText for name input, a TextView for the label, radio buttons for text color, checkboxes for text style, and buttons for different actions.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter your name"/>

    <RadioGroup
        android:id="@+id/color_group"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <RadioButton
            android:id="@+id/red_radio"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Red"/>

        <RadioButton
            android:id="@+id/green_radio"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Green"/>

        <RadioButton
            android:id="@+id/blue_radio"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Blue"/>

    </RadioGroup>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <CheckBox
            android:id="@+id/bold_checkbox"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Bold"/>

        <CheckBox
            android:id="@+id/italic_checkbox"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Italic"/>

        <CheckBox
            android:id="@+id/underline_checkbox"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Underline"/>

    </LinearLayout>

    <Button
        android:id="@+id/display_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Display"/>

    <Button
        android:id="@+id/clear_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Clear"/>

    <Button
        android:id="@+id/exit_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Exit"/>

    <TextView
        android:id="@+id/display_label"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:text=""/>

</LinearLayout>
---------
Slip 13

1]
Step 1: Create the Main Activity
In this activity, implement the user interface for the registration form and validation logic.

java

package com.example.registrationform;

import android.os.Bundle;
import android.text.TextUtils;
import android.util.Patterns;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText firstNameInput;
    private EditText lastNameInput;
    private EditText emailInput;
    private EditText passwordInput;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        firstNameInput = findViewById(R.id.first_name_input);
        lastNameInput = findViewById(R.id.last_name_input);
        emailInput = findViewById(R.id.email_input);
        passwordInput = findViewById(R.id.password_input);

        Button submitButton = findViewById(R.id.submit_button);
        submitButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                validateAndSubmit();
            }
        });
    }

    private void validateAndSubmit() {
        String firstName = firstNameInput.getText().toString().trim();
        String lastName = lastNameInput.getText().toString().trim();
        String email = emailInput.getText().toString().trim();
        String password = passwordInput.getText().toString().trim();

        // Validate first name
        if (TextUtils.isEmpty(firstName)) {
            Toast.makeText(this, "First name is required.", Toast.LENGTH_SHORT).show();
            return;
        }

        // Validate last name
        if (TextUtils.isEmpty(lastName)) {
            Toast.makeText(this, "Last name is required.", Toast.LENGTH_SHORT).show();
            return;
        }

        // Validate email
        if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
            Toast.makeText(this, "Invalid email address.", Toast.LENGTH_SHORT).show();
            return;
        }

        // Validate password (at least 6 characters)
        if (password.length() < 6) {
            Toast.makeText(this, "Password must be at least 6 characters.", Toast.LENGTH_SHORT).show();
            return;
        }

        // If all validations pass, simulate registration success
        Toast.makeText(this, "Registration successful!", Toast.LENGTH_SHORT).show();
    }
}
Step 2: Create the Layout File
Design the registration form with fields for first name, last name, email, password, and a submit button.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/first_name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="First Name"/>

    <EditText
        android:id="@+id/last_name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Last Name"/>

    <EditText
        android:id="@+id/email_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Email Address"
        android:inputType="textEmailAddress"/>

    <EditText
        android:id="@+id/password_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Password"
        android:inputType="textPassword"/>

    <Button
        android:id="@+id/submit_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Submit"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
In this step, you'll implement the ListView and its operations, including insert, delete, and search.

java

package com.example.listviewoperations;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity {

    private ListView listView;
    private EditText itemInput;
    private List<String> itemList;
    private ArrayAdapter<String> listAdapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        listView = findViewById(R.id.list_view);
        itemInput = findViewById(R.id.item_input);

        itemList = new ArrayList<>(); // List to hold ListView items
        listAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, itemList);
        listView.setAdapter(listAdapter);

        // Button to insert new items
        Button insertButton = findViewById(R.id.insert_button);
        insertButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                insertItem();
            }
        });

        // Button to delete the selected item from the ListView
        Button deleteButton = findViewById(R.id.delete_button);
        deleteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                deleteItem();
            }
        });

        // Button to search for items in the ListView
        Button searchButton = findViewById(R.id.search_button);
        searchButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                searchItem();
            }
        });
    }

    private void insertItem() {
        String item = itemInput.getText().toString().trim();

        if (TextUtils.isEmpty(item)) {
            Toast.makeText(this, "Please enter an item.", Toast.LENGTH_SHORT).show();
            return;
        }

        itemList.add(item); // Add the item to the list
        listAdapter.notifyDataSetChanged(); // Update the ListView
        itemInput.setText(""); // Clear the input field
        Toast.makeText(this, "Item inserted.", Toast.LENGTH_SHORT).show();
    }

    private void deleteItem() {
        int position = listView.getCheckedItemPosition(); // Get the selected item position

        if (position >= 0 && position < itemList.size()) {
            itemList.remove(position); // Remove the item from the list
            listAdapter.notifyDataSetChanged(); // Update the ListView
            listView.clearChoices(); // Clear the selected item
            Toast.makeText(this, "Item deleted.", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "Please select an item to delete.", Toast.LENGTH_SHORT).show();
        }
    }

    private void searchItem() {
        String item = itemInput.getText().toString().trim();

        if (TextUtils.isEmpty(item)) {
            Toast.makeText(this, "Please enter an item to search.", Toast.LENGTH_SHORT).show();
            return;
        }

        boolean found = itemList.contains(item); // Check if the item exists in the list
        if (found) {
            int position = itemList.indexOf(item); // Get the position of the item
            listView.setSelection(position); // Scroll to the item in the ListView
            Toast.makeText(this, "Item found at position " + position, Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "Item not found.", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 2: Create the Layout File
This layout includes a ListView to display items, an EditText for user input, and buttons for insert, delete, and search operations.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/item_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter item"/>

    <Button
        android:id="@+id/insert_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Insert Item"/>

    <Button
        android:id="@+id/delete_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Delete Selected Item"/>

    <Button
        android:id="@+id/search_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Search Item"/>

    <ListView
        android:id="@+id/list_view"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>

</LinearLayout>

---------
Slip 14

1]
Step 1: Create the Main Activity
In this step, implement the logic to accept a number, calculate its factorial, and display the result.

java

package com.example.factorialcalculator;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

import java.math.BigInteger;

public class MainActivity extends AppCompatActivity {

    private EditText numberInput;
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        numberInput = findViewById(R.id.number_input); // EditText to input the number
        resultText = findViewById(R.id.result_text); // TextView to display the result

        Button calculateButton = findViewById(R.id.calculate_button); // Button to trigger the calculation
        calculateButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                calculateFactorial();
            }
        });
    }

    private void calculateFactorial() {
        String numberStr = numberInput.getText().toString().trim();

        if (TextUtils.isEmpty(numberStr)) {
            Toast.makeText(this, "Please enter a number.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            int number = Integer.parseInt(numberStr);

            if (number < 0) {
                Toast.makeText(this, "Factorial is not defined for negative numbers.", Toast.LENGTH_SHORT).show();
                return;
            }

            BigInteger factorial = factorial(number); // Calculate the factorial
            resultText.setText("Factorial of " + number + " is " + factorial.toString());

        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid number. Please enter a valid integer.", Toast.LENGTH_SHORT).show();
        }
    }

    private BigInteger factorial(int n) {
        BigInteger result = BigInteger.ONE;

        for (int i = 2; i <= n; i++) {
            result = result.multiply(BigInteger.valueOf(i)); // Multiply by each integer from 2 to n
        }

        return result;
    }
}
Step 2: Create the Layout File
Design a layout with an EditText for number input, a Button to calculate the factorial, and a TextView to display the result.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/number_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter a number"/>

    <Button
        android:id="@+id/calculate_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Calculate Factorial"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
In this activity, implement the user interface for the login form and the login logic.

java

package com.example.loginform;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText usernameInput;
    private EditText passwordInput;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        usernameInput = findViewById(R.id.username_input); // EditText for username
        passwordInput = findViewById(R.id.password_input); // EditText for password

        Button loginButton = findViewById(R.id.login_button); // Login button
        loginButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                handleLogin();
            }
        });
    }

    private void handleLogin() {
        String username = usernameInput.getText().toString().trim();
        String password = passwordInput.getText().toString().trim();

        if (TextUtils.isEmpty(username) || TextUtils.isEmpty(password)) {
            Toast.makeText(this, "Please enter both username and password.", Toast.LENGTH_SHORT).show();
            return;
        }

        // Validate the username and password
        if (username.equals(password)) { // In this example, username and password must be the same
            Toast.makeText(this, "Login Successful...", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "Invalid Login", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 2: Create the Layout File
Design the login form with EditText fields for username and password, and a Button for login.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/username_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Username"/>

    <EditText
        android:id="@+id/password_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Password"
        android:inputType="textPassword"/> <!-- Obscures the text for security -->

    <Button
        android:id="@+id/login_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Login"/>

</LinearLayout>

---------
Slip 15

1]
Step 1: Create the Main Activity
This activity will implement the logic to accept two numbers, perform arithmetic operations, and display the results using Toast.

java

package com.example.arithmeticcalculator;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText number1Input;
    private EditText number2Input;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        number1Input = findViewById(R.id.number1_input); // EditText for first number
        number2Input = findViewById(R.id.number2_input); // EditText for second number

        Button addButton = findViewById(R.id.add_button); // Button for addition
        addButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                performAddition();
            }
        });

        Button subButton = findViewById(R.id.sub_button); // Button for subtraction
        subButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                performSubtraction();
            }
        });

        Button divButton = findViewById(R.id.div_button); // Button for division
        divButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                performDivision();
            }
        });

        Button multButton = findViewById(R.id.mult_button); // Button for multiplication
        multButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                performMultiplication();
            }
        });
    }

    private void performAddition() {
        String num1Str = number1Input.getText().toString().trim();
        String num2Str = number2Input.getText().toString().trim();

        if (TextUtils.isEmpty(num1Str) || TextUtils.isEmpty(num2Str)) {
            Toast.makeText(this, "Please enter both numbers.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            double num1 = Double.parseDouble(num1Str);
            double num2 = Double.parseDouble(num2Str);
            double result = num1 + num2;

            Toast.makeText(this, "Result: " + result, Toast.LENGTH_SHORT).show();
        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid number input.", Toast.LENGTH_SHORT).show();
        }
    }

    private void performSubtraction() {
        String num1Str = number1Input.getText().toString().trim();
        String num2Str = number2Input.getText().toString().trim();

        if (TextUtils.isEmpty(num1Str) || TextUtils.isEmpty(num2Str)) {
            Toast.makeText(this, "Please enter both numbers.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            double num1 = Double.parseDouble(num1Str);
            double num2 = Double.parseDouble(num2Str);
            double result = num1 - num2;

            Toast.makeText(this, "Result: " + result, Toast.LENGTH_SHORT).show();
        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid number input.", Toast.LENGTH_SHORT).show();
        }
    }

    private void performDivision() {
        String num1Str = number1Input.getText().toString().trim();
        String num2Str = number2Input.getText().toString().trim();

        if (TextUtils.isEmpty(num1Str) || TextUtils.isEmpty(num2Str)) {
            Toast.makeText(this, "Please enter both numbers.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            double num1 = Double.parseDouble(num1Str);
            double num2 = Double.parseDouble(num2Str);

            if (num2 == 0) {
                Toast.makeText(this, "Division by zero is not allowed.", Toast.LENGTH_SHORT).show();
                return;
            }

            double result = num1 / num2;

            Toast.makeText(this, "Result: " + result, Toast.LENGTH_SHORT).show();
        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid number input.", Toast.LENGTH_SHORT).show();
        }
    }

    private void performMultiplication() {
        String num1Str = number1Input.getText().toString().trim();
        String num2Str = number2Input.getText().toString().trim();

        if (TextUtils.isEmpty(num1Str) || TextUtils.isEmpty(num2Str)) {
            Toast.makeText(this, "Please enter both numbers.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            double num1 = Double.parseDouble(num1Str);
            double num2 = Double.parseDouble(num2Str);
            double result = num1 * num2;

            Toast.makeText(this, "Result: " + result, Toast.LENGTH_SHORT).show();
        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid number input.", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 2: Create the Layout File
Design the layout with two EditText fields for numbers, four buttons for the arithmetic operations, and use Toast to display results.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/number1_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter first number"/>

    <EditText
        android:id="@+id/number2_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter second number"/>

    <Button
        android:id="@+id/add_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="ADD"/>

    <Button
        android:id="@+id/sub_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="SUB"/>

    <Button
        android:id="@+id/div_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="DIV"/>

    <Button
        android:id="@+id/mult_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="MULT"/>

</LinearLayout>

2]
Step 1: Define the Account Model
The account model represents a simple bank account with properties like account number, account type, and balance.

java

package com.example.simplebankapp;

public class BankAccount {

    private String accountNumber;
    private String accountType;
    private double balance;

    public BankAccount(String accountNumber, String accountType, double initialBalance) {
        this.accountNumber = accountNumber;
        this.accountType = accountType;
        this.balance = initialBalance;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public String getAccountType() {
        return accountType;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
        }
    }

    public boolean withdraw(double amount) {
        if (amount > balance || amount <= 0) {
            return false; // Insufficient funds or invalid amount
        }
        balance -= amount;
        return true;
    }
}
Step 2: Create the Main Activity
In this activity, implement the user interface and account operations, including creating an account, checking balance, depositing, and withdrawing.

java

package com.example.simplebankapp;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText accountNumberInput;
    private RadioGroup accountTypeGroup;
    private EditText amountInput;
    private TextView resultText;

    private BankAccount bankAccount; // Bank account instance

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        accountNumberInput = findViewById(R.id.account_number_input);
        accountTypeGroup = findViewById(R.id.account_type_group);
        amountInput = findViewById(R.id.amount_input);
        resultText = findViewById(R.id.result_text);

        Button createButton = findViewById(R.id.create_button);
        createButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                createAccount();
            }
        });

        Button balanceButton = findViewById(R.id.balance_button);
        balanceButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkBalance();
            }
        });

        Button depositButton = findViewById(R.id.deposit_button);
        depositButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                deposit();
            }
        });

        Button withdrawButton = findViewById(R.id.withdraw_button);
        withdrawButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                withdraw();
            }
        });
    }

    private void createAccount() {
        String accountNumber = accountNumberInput.getText().toString().trim();
        int selectedAccountTypeId = accountTypeGroup.getCheckedRadioButtonId();
        String accountType = (selectedAccountTypeId == R.id.radio_checking) ? "Checking" : "Savings";

        if (TextUtils.isEmpty(accountNumber)) {
            Toast.makeText(this, "Account number is required.", Toast.LENGTH_SHORT).show();
            return;
        }

        bankAccount = new BankAccount(accountNumber, accountType, 0.0);
        Toast.makeText(this, "Account created successfully.", Toast.LENGTH_SHORT).show();
    }

    private void checkBalance() {
        if (bankAccount == null) {
            Toast.makeText(this, "Please create an account first.", Toast.LENGTH_SHORT).show();
            return;
        }

        resultText.setText("Balance: " + bankAccount.getBalance());
    }

    private void deposit() {
        if (bankAccount == null) {
            Toast.makeText(this, "Please create an account first.", Toast.LENGTH_SHORT).show();
            return;
        }

        String amountStr = amountInput.getText().toString().trim();
        if (TextUtils.isEmpty(amountStr)) {
            Toast.makeText(this, "Please enter a deposit amount.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            double amount = Double.parseDouble(amountStr);
            bankAccount.deposit(amount);
            Toast.makeText(this, "Amount deposited.", Toast.LENGTH_SHORT).show();
        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid amount.", Toast.LENGTH_SHORT).show();
        }
    }

    private void withdraw() {
        if (bankAccount == null) {
            Toast.makeText(this, "Please create an account first.", Toast.LENGTH_SHORT).show();
            return;
        }

        String amountStr = amountInput.getText().toString().trim();
        if (TextUtils.isEmpty(amountStr)) {
            Toast.makeText(this, "Please enter a withdrawal amount.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            double amount = Double.parseDouble(amountStr);
            boolean successful = bankAccount.withdraw(amount);

            if (successful) {
                Toast.makeText(this, "Amount withdrawn.", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "Insufficient funds or invalid amount.", Toast.LENGTH_SHORT).show();
            }
        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid amount.", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 3: Create the Layout File
Design the layout with EditText for account number and amount, RadioGroup for account type, and buttons for the various operations.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/account_number_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Account Number"/>

    <RadioGroup
        android:id="@+id/account_type_group"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <RadioButton
            android:id="@+id/radio_checking"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Checking"/>

        <RadioButton
            android:id="@+id/radio_savings"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Savings"/>

    </RadioGroup>

    <EditText
        android:id="@+id/amount_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Amount"/>

    <Button
        android:id="@+id/create_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Create Account"/>

    <Button
        android:id="@+id/balance_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Check Balance"/>

    <Button
        android:id="@+id/deposit_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Deposit"/>

    <Button
        android:id="@+id/withdraw_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Withdraw"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:text="Result will be displayed here"/>

</LinearLayout>

---------
Slip 16

1]
Step 1: Create the First Activity
This activity will contain a button that, when clicked, sends the "Hello" message to the second activity.

java

package com.example.hellointent;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button sendHelloButton = findViewById(R.id.send_hello_button); // Button to trigger sending the message
        sendHelloButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                sendHelloMessage();
            }
        });
    }

    private void sendHelloMessage() {
        Intent intent = new Intent(this, SecondActivity.class); // Intent to start the second activity
        intent.putExtra("message", "Hello"); // Put the "Hello" message into the Intent
        startActivity(intent); // Start the second activity
    }
}
Step 2: Create the Second Activity
This activity will receive the "Hello" message and display it in a TextView.

java

package com.example.hellointent;

import android.os.Bundle;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class SecondActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);

        TextView messageTextView = findViewById(R.id.message_text_view); // TextView to display the message

        // Retrieve the "Hello" message from the Intent
        String message = getIntent().getStringExtra("message");

        if (message != null) {
            messageTextView.setText(message); // Display the message in the TextView
        }
    }
}
Step 3: Create the Layout Files
Define the layout for the first activity with a button to trigger sending the "Hello" message.

Layout for Main Activity (activity_main.xml)
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <Button
        android:id="@+id/send_hello_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Send Hello"/>

</LinearLayout>
Layout for Second Activity (activity_second.xml)
Define the layout with a TextView to display the received message.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <TextView
        android:id="@+id/message_text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Message will be displayed here"
        android:textSize="18sp"/>

</LinearLayout>

2]
Step 1: Create the First Activity
This activity will have an EditText for entering the player's name and a Button to send the name to the second activity.

java

package com.example.playername;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText playerNameInput;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        playerNameInput = findViewById(R.id.player_name_input); // EditText for entering the player name
        Button sendButton = findViewById(R.id.send_button); // Button to send the name to the second activity

        sendButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                sendPlayerName();
            }
        });
    }

    private void sendPlayerName() {
        String playerName = playerNameInput.getText().toString().trim();

        if (TextUtils.isEmpty(playerName)) {
            Toast.makeText(this, "Please enter a player name.", Toast.LENGTH_SHORT).show();
            return;
        }

        Intent intent = new Intent(this, SecondActivity.class); // Intent to start the second activity
        intent.putExtra("player_name", playerName); // Pass the player name to the second activity
        startActivity(intent);
    }
}
Step 2: Create the Second Activity
This activity will display the player name and have a button to return to the first activity.

java

package com.example.playername;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class SecondActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);

        TextView playerNameTextView = findViewById(R.id.player_name_text_view); // TextView to display the player name
        Button backButton = findViewById(R.id.back_button); // Button to go back to the first activity

        // Retrieve the player name from the Intent
        String playerName = getIntent().getStringExtra("player_name");
        
        if (playerName != null) {
            playerNameTextView.setText("Player: " + playerName); // Display the player name
        }

        // Handle the BACK button to go back to the first activity
        backButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish(); // Close the current activity to return to the first activity
            }
        });
    }
}
Step 3: Create the Layout Files
Define the layout for the first activity with an EditText for player name input and a Button to send the name to the second activity.

Layout for Main Activity (activity_main.xml)
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center">

    <EditText
        android:id="@+id/player_name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter player name"/>

    <Button
        android:id="@+id/send_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Send Name"/>

</LinearLayout>
Layout for Second Activity (activity_second.xml)
Define the layout with a TextView to display the player name and a Button to go back to the first activity.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center">

    <TextView
        android:id="@+id/player_name_text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Player Name Will Be Displayed Here"
        android:textSize="18sp"/>

    <Button
        android:id="@+id/back_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="BACK"/>

</LinearLayout>

---------
Slip 17

1]
Step 1: Create the Main Activity
In this step, we'll implement the methods that represent the activity life cycle, such as onCreate, onStart, onResume, onPause, onStop, onRestart, and onDestroy. Each method will contain code to show a toast and log a message to help visualize the life cycle.

java

package com.example.activitylifecycle;

import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "ActivityLifeCycle";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toast.makeText(this, "onCreate called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onCreate called");
    }

    @Override
    protected void onStart() {
        super.onStart();
        Toast.makeText(this, "onStart called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onStart called");
    }

    @Override
    protected void onResume() {
        super.onResume();
        Toast.makeText(this, "onResume called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onResume called");
    }

    @Override
    protected void onPause() {
        super.onPause();
        Toast.makeText(this, "onPause called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onPause called");
    }

    @Override
    protected void onStop() {
        super.onStop();
        Toast.makeText(this, "onStop called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onStop called");
    }

    @Override
    protected void onRestart() {
        super.onRestart();
        Toast.makeText(this, "onRestart called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onRestart called");
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Toast.makeText(this, "onDestroy called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onDestroy called");
    }
}
Step 2: Create the Layout File
The layout can be simple, as the primary focus is on the life cycle methods. However, you can include a basic text view to give the activity some content.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Activity Life Cycle Demo"
        android:textSize="24sp"/>

</LinearLayout>


2]
Step 1: Set Up a PhoneGap Project
Install PhoneGap or Cordova CLI.
Create a new PhoneGap project.
bash

cordova create ContactApp
cd ContactApp
Add the Contacts plugin.
bash

cordova plugin add cordova-plugin-contacts
Step 2: Define the User Interface
Create the user interface with buttons for creating, searching, cloning, and removing contacts.

www/index.html
html

<!DOCTYPE html>
<html>
<head>
    <title>Contact App</title>
    <script src="cordova.js"></script>
    <script src="js/index.js"></script>
</head>
<body>
    <h1>Contact App</h1>

    <button onclick="createContact()">Create Contact</button>
    <button onclick="searchContacts()">Search Contacts</button>
    <button onclick="cloneContact()">Clone Contact</button>
    <button onclick="removeContact()">Remove Contact</button>

    <div id="results"></div>
</body>
</html>
Step 3: Implement JavaScript Logic
Define functions to create, search, clone, and remove contacts using the Cordova Contacts plugin.

www/js/index.js
javascript

document.addEventListener("deviceready", onDeviceReady, false);

function onDeviceReady() {
    console.log("Device is ready");
}

// Function to create a new contact
function createContact() {
    var myContact = navigator.contacts.create({
        "displayName": "John Doe",
        "name": {
            "givenName": "John",
            "familyName": "Doe"
        },
        "phoneNumbers": [
            { "type": "mobile", "value": "1234567890", "pref": false }
        ]
    });

    myContact.save(
        function() {
            alert("Contact created successfully!");
        },
        function(error) {
            alert("Error creating contact: " + error.code);
        }
    );
}

// Function to search for contacts
function searchContacts() {
    var options = new ContactFindOptions();
    options.filter = "John Doe"; // Search for "John Doe"
    options.multiple = true;
    var fields = ["displayName", "name"];

    navigator.contacts.find(
        fields,
        function(contacts) {
            var results = "Found contacts: <br>";
            contacts.forEach(function(contact) {
                results += contact.displayName + "<br>";
            });
            document.getElementById("results").innerHTML = results;
        },
        function(error) {
            alert("Error searching contacts: " + error.code);
        },
        options
    );
}

// Function to clone a contact
function cloneContact() {
    var options = new ContactFindOptions();
    options.filter = "John Doe"; // Search for "John Doe"
    var fields = ["displayName", "name"];

    navigator.contacts.find(
        fields,
        function(contacts) {
            if (contacts.length > 0) {
                var originalContact = contacts[0];
                var clonedContact = navigator.contacts.create(originalContact);
                clonedContact.save(
                    function() {
                        alert("Contact cloned successfully!");
                    },
                    function(error) {
                        alert("Error cloning contact: " + error.code);
                    }
                );
            } else {
                alert("Contact not found to clone.");
            }
        },
        function(error) {
            alert("Error finding contact: " + error.code);
        },
        options
    );
}

// Function to remove a contact
function removeContact() {
    var options = new ContactFindOptions();
    options.filter = "John Doe"; // Search for "John Doe"
    var fields = ["displayName", "name"];

    navigator.contacts.find(
        fields,
        function(contacts) {
            if (contacts.length > 0) {
                var contactToRemove = contacts[0];
                contactToRemove.remove(
                    function() {
                        alert("Contact removed successfully!");
                    },
                    function(error) {
                        alert("Error removing contact: " + error.code);
                    }
                );
            } else {
                alert("Contact not found to remove.");
            }
        },
        function(error) {
            alert("Error finding contact: " + error.code);
        },
        options
    );
}
Step 4: Test the Application
Build and deploy your application to a device or emulator with the Contacts permission.

-- bash(terminal)

cordova build
cordova run android

---------
Slip 18

1]
Step 1: Define Resource Files for Colors and Dimensions
These resource files allow for easier customization of colors and font sizes.

res/values/colors.xml
xml

<resources>
    <color name="white">#FFFFFF</color>
    <color name="black">#000000</color>
    <color name="red">#FF0000</color>
    <color name="green">#00FF00</color>
    <color name="blue">#0000FF</color>
</resources>
res/values/dimens.xml
xml

<resources>
    <dimen name="small_text_size">14sp</dimen>
    <dimen name="medium_text_size">18sp</dimen>
    <dimen name="large_text_size">24sp</dimen>
</resources>
Step 2: Create the Main Activity
This activity will contain a TextView to display text, and buttons to change the background color and font size.

java

package com.example.screencolorandfontsize;

import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private LinearLayout rootLayout; // The root layout to change the background color
    private TextView textView; // The TextView to change the font size

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        rootLayout = findViewById(R.id.root_layout); // The main layout
        textView = findViewById(R.id.text_view); // The TextView to adjust font size and display text

        // Button to change the background color to red
        Button redButton = findViewById(R.id.red_button);
        redButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                rootLayout.setBackgroundColor(Color.RED);
            }
        });

        // Button to change the background color to green
        Button greenButton = findViewById(R.id.green_button);
        greenButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                rootLayout.setBackgroundColor(Color.GREEN);
            }
        });

        // Button to change the background color to blue
        Button blueButton = findViewById(R.id.blue_button);
        blueButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                rootLayout.setBackgroundColor(Color.BLUE);
            }
        });

        // Button to set the font size to small
        Button smallFontButton = findViewById(R.id.small_font_button);
        smallFontButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                textView.setTextSize(getResources().getDimension(R.dimen.small_text_size));
            }
        });

        // Button to set the font size to medium
        Button mediumFontButton = findViewById(R.id.medium_font_button);
        mediumFontButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                textView.setTextSize(getResources().getDimension(R.dimen.medium_text_size));
            }
        });

        // Button to set the font size to large
        Button largeFontButton = findViewById(R.id.large_font_button);
        largeFontButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                textView.setTextSize(getResources().getDimension(R.dimen.large_text_size));
            }
        });
    }
}
Step 3: Create the Layout File
This layout will contain a LinearLayout for the root, a TextView for displaying text, and buttons to change the background color and font size.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:id="@+id/root_layout"> <!-- Root layout for changing background color -->

    <TextView
        android:id="@+id/text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Hello, World!"
        android:textSize="18sp"/> <!-- Default font size -->

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <Button
            android:id="@+id/red_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Red"/>

        <Button
            android:id="@+id/green_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Green"/>

        <Button
            android:id="@+id/blue_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Blue"/>

    </LinearLayout>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <Button
            android:id="@+id/small_font_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Small Font"/>

        <Button
            android:id="@+id/medium_font_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Medium Font"/>

        <Button
            android:id="@+id/large_font_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Large Font"/>

    </LinearLayout>

</LinearLayout>

2]
Step 1: Create the SQLite Database Helper
Define a helper class to manage the creation and operations on the Project table.

java

package com.example.projectdb;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class ProjectDatabaseHelper extends SQLiteOpenHelper {

    private static final String DATABASE_NAME = "ProjectDatabase";
    private static final int DATABASE_VERSION = 1;

    private static final String TABLE_PROJECT = "Project";
    private static final String COLUMN_ID = "id";
    private static final String COLUMN_NAME = "name";
    private static final String COLUMN_DEPT = "dept";
    private static final String COLUMN_CITY = "city";

    public ProjectDatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // Create the Project table
        String createTableQuery = "CREATE TABLE " + TABLE_PROJECT + " (" +
                COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_NAME + " TEXT, " +
                COLUMN_DEPT + " TEXT, " +
                COLUMN_CITY + " TEXT)";
        db.execSQL(createTableQuery);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_PROJECT);
        onCreate(db);
    }

    // Add a new record to the Project table
    public boolean addProject(String name, String dept, String city) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(COLUMN_NAME, name);
        values.put(COLUMN_DEPT, dept);
        values.put(COLUMN_CITY, city);

        long result = db.insert(TABLE_PROJECT, null, values);
        return result != -1; // Returns true if insertion was successful
    }

    // Retrieve all records from the Project table
    public Cursor getAllProjects() {
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT * FROM " + TABLE_PROJECT;
        return db.rawQuery(query, null);
    }
}
Step 2: Create the Main Activity
This activity will implement the user interface and operations to add records and display all records.

java

package com.example.projectdb;

import android.database.Cursor;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private ProjectDatabaseHelper dbHelper;
    private EditText nameInput, deptInput, cityInput;
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        dbHelper = new ProjectDatabaseHelper(this);

        nameInput = findViewById(R.id.name_input);
        deptInput = findViewById(R.id.dept_input);
        cityInput = findViewById(R.id.city_input);

        Button addButton = findViewById(R.id.add_button); // Button to add new records
        Button displayAllButton = findViewById(R.id.display_all_button); // Button to display all records

        resultText = findViewById(R.id.result_text);

        addButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                addProject();
            }
        });

        displayAllButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                displayAllProjects();
            }
        });
    }

    private void addProject() {
        String name = nameInput.getText().toString();
        String dept = deptInput.getText().toString();
        String city = cityInput.getText().toString();

        if (dbHelper.addProject(name, dept, city)) {
            resultText.setText("Project added successfully.");
        } else {
            resultText.setText("Error adding project.");
        }
    }

    private void displayAllProjects() {
        Cursor cursor = dbHelper.getAllProjects();
        if (cursor != null && cursor.moveToFirst()) {
            StringBuilder sb = new StringBuilder();
            do {
                int id = cursor.getInt(cursor.getColumnIndex(ProjectDatabaseHelper.COLUMN_ID));
                String name = cursor.getString(cursor.getColumnIndex(ProjectDatabaseHelper.COLUMN_NAME));
                String dept = cursor.getString(cursor.getColumnIndex(ProjectDatabaseHelper.COLUMN_DEPT));
                String city = cursor.getString(cursor.getColumnIndex(ProjectDatabaseHelper.COLUMN_CITY));

                sb.append("ID: ").append(id).append("\n");
                sb.append("Name: ").append(name).append("\n");
                sb.append("Department: ").append(dept).append("\n");
                sb.append("City: ").append(city).append("\n");
                sb.append("---------------------------\n");
            } while (cursor.moveToNext());

            resultText.setText(sb.toString());
        } else {
            resultText.setText("No records found.");
        }
    }
}
Step 3: Create the Layout File
Define the layout with EditText fields for input, and buttons to add new records and display all records.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Project Name"/>

    <EditText
        android:id="@+id/dept_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Department"/>

    <EditText
        android:id="@+id/city_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter City"/>

    <Button
        android:id="@+id/add_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Add Project"/>

    <Button
        android:id="@+id/display_all_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Display All Projects"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:text="Results will be displayed here"/>

</LinearLayout>
---------
Slip 19

1]
Step 1: Define Drawable Resources
Ensure you have at least two images in your res/drawable folder to switch between. You can add images by dragging them into the drawable folder in your Android project.

For example:

image1.png: The first image.
image2.png: The second image.
Step 2: Create the Main Activity
This activity contains an ImageView to display the image and a button to change the displayed image.

java

package com.example.changeimage;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private ImageView imageView;
    private boolean isImageOneDisplayed = true; // Track which image is currently displayed

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        imageView = findViewById(R.id.image_view); // The ImageView to display images
        Button changeImageButton = findViewById(R.id.change_image_button); // Button to change the image

        changeImageButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                changeImage();
            }
        });
    }

    private void changeImage() {
        if (isImageOneDisplayed) {
            imageView.setImageResource(R.drawable.image2); // Change to image2
        } else {
            imageView.setImageResource(R.drawable.image1); // Change to image1
        }

        isImageOneDisplayed = !isImageOneDisplayed; // Toggle the boolean
    }
}
Step 3: Create the Layout File
Define a layout with an ImageView to display the image and a Button to change the displayed image.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center">

    <ImageView
        android:id="@+id/image_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:src="@drawable/image1" <!-- Default image -->
        android:contentDescription="Displayed Image"/>

    <Button
        android:id="@+id/change_image_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Change Image"/>

</LinearLayout>

2]
Step 1: Define the Menu
Define an XML resource to represent the options menu with two items: "Find Factorial" and "Find Sum of Digits".

res/menu/options_menu.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item
        android:id="@+id/menu_find_factorial"
        android:title="Find Factorial" />
    <item
        android:id="@+id/menu_find_sum_of_digits"
        android:title="Find Sum of Digits" />
</menu>
Step 2: Create the Main Activity
This activity will contain the EditText for user input and handle menu item selection to perform the required operations.

java

package com.example.factorialsanddigits;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

import java.math.BigInteger;

public class MainActivity extends AppCompatActivity {

    private EditText numberInput;
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        numberInput = findViewById(R.id.number_input);
        resultText = findViewById(R.id.result_text);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.options_menu, menu); // Inflate the options menu
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.menu_find_factorial:
                findFactorial();
                return true;
            case R.id.menu_find_sum_of_digits:
                findSumOfDigits();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    private void findFactorial() {
        String numberStr = numberInput.getText().toString().trim();

        if (TextUtils.isEmpty(numberStr)) {
            Toast.makeText(this, "Please enter a number.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            int number = Integer.parseInt(numberStr);
            if (number < 0) {
                Toast.makeText(this, "Factorial is not defined for negative numbers.", Toast.LENGTH_SHORT).show();
                return;
            }

            BigInteger factorial = calculateFactorial(number);
            resultText.setText("Factorial of " + number + " is " + factorial.toString());

        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid number.", Toast.LENGTH_SHORT).show();
        }
    }

    private BigInteger calculateFactorial(int n) {
        BigInteger result = BigInteger.ONE;
        for (int i = 2; i <= n; i++) {
            result = result.multiply(BigInteger.valueOf(i)); // Multiply by each number from 2 to n
        }
        return result;
    }

    private void findSumOfDigits() {
        String numberStr = numberInput.getText().toString().trim();

        if (TextUtils.isEmpty(numberStr)) {
            Toast.makeText(this, "Please enter a number.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            int number = Integer.parseInt(numberStr);
            int sum = calculateSumOfDigits(number);
            resultText.setText("Sum of digits of " + number + " is " + sum);

        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid number.", Toast.LENGTH_SHORT).show();
        }
    }

    private int calculateSumOfDigits(int number) {
        int sum = 0;
        while (number > 0) {
            sum += number % 10; // Get the last digit and add to the sum
            number /= 10; // Remove the last digit
        }
        return sum;
    }
}
Step 3: Create the Layout File
Define a simple layout with an EditText for user input and a TextView to display the result.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/number_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter a number"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:text="Result will be displayed here"/>

</LinearLayout>

---------
Slip 20

1]
Step 1: Create the Main Activity
This activity will contain the logic to accept user input, check the numbers, and either display them or reject the input if both numbers are greater than 20.

java

package com.example.twonumbers;

import android.os.Bundle;
import android.text.TextUtils;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText firstNumberInput, secondNumberInput;
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        firstNumberInput = findViewById(R.id.first_number_input);
        secondNumberInput = findViewById(R.id.second_number_input);
        resultText = findViewById(R.id.result_text);

        Button submitButton = findViewById(R.id.submit_button); // Button to submit the input
        submitButton.setOnClickListener(v -> validateAndDisplayNumbers());
    }

    private void validateAndDisplayNumbers() {
        String firstNumberStr = firstNumberInput.getText().toString().trim();
        String secondNumberStr = secondNumberInput.getText().toString().trim();

        if (TextUtils.isEmpty(firstNumberStr) || TextUtils.isEmpty(secondNumberStr)) {
            Toast.makeText(this, "Please enter both numbers.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            int firstNumber = Integer.parseInt(firstNumberStr);
            int secondNumber = Integer.parseInt(secondNumberStr);

            if (firstNumber > 20 && secondNumber > 20) {
                Toast.makeText(this, "Both numbers are greater than 20. Please enter new numbers.", Toast.LENGTH_SHORT).show();
                firstNumberInput.setText(""); // Clear the inputs
                secondNumberInput.setText("");
            } else {
                resultText.setText("First Number: " + firstNumber + "\nSecond Number: " + secondNumber);
            }
        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid input. Please enter valid numbers.", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 2: Create the Layout File
This layout includes EditText for user input, a Button to submit the numbers, and a TextView to display the result or error messages.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/first_number_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter first number"/>

    <EditText
        android:id="@+id/second_number_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter second number"/>

    <Button
        android:id="@+id/submit_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Submit"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:text="Result will be displayed here"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
In this activity, define the logic to send an email with an attachment.

java

package com.example.sendemail;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.widget.Button;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

import java.io.File;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button sendEmailButton = findViewById(R.id.send_email_button);
        sendEmailButton.setOnClickListener(v -> sendEmailWithAttachment());
    }

    private void sendEmailWithAttachment() {
        // Replace with a valid file path for the attachment
        File file = new File(getExternalFilesDir(null), "example.txt");

        if (!file.exists()) {
            Toast.makeText(this, "Attachment file not found.", Toast.LENGTH_SHORT).show();
            return;
        }

        Uri fileUri = Uri.fromFile(file); // Create a URI from the file

        Intent emailIntent = new Intent(Intent.ACTION_SEND);
        emailIntent.setType("application/pdf"); // Or the appropriate MIME type for your attachment
        emailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{"recipient@example.com"}); // Set recipient
        emailIntent.putExtra(Intent.EXTRA_SUBJECT, "Subject of Email"); // Set subject
        emailIntent.putExtra(Intent.EXTRA_TEXT, "This is the body of the email."); // Set email body
        emailIntent.putExtra(Intent.EXTRA_STREAM, fileUri); // Attach the file

        try {
            startActivity(Intent.createChooser(emailIntent, "Send email with..."));
        } catch (Exception e) {
            Toast.makeText(this, "No email clients installed.", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 2: Create the Layout File
Design a simple layout with a button to trigger sending the email with the attachment.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center">

    <Button
        android:id="@+id/send_email_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Send Email with Attachment"/>

</LinearLayout>
Step 3: Handle Permissions (Optional)
If the attachment requires access to external storage, ensure you have the proper permissions.

AndroidManifest.xml
xml

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.example.sendemail">

    <application>
        <!-- Your application code -->
    </application>

    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/> <!-- Required for accessing files from external storage -->

</manifest>

-----------
Slip 21

1]
Step 1: Create the Main Activity
In this step, we'll implement the methods that represent the activity life cycle, such as onCreate, onStart, onResume, onPause, onStop, onRestart, and onDestroy. Each method will contain code to show a toast and log a message to help visualize the life cycle.

java

package com.example.activitylifecycle;

import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "ActivityLifeCycle";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toast.makeText(this, "onCreate called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onCreate called");
    }

    @Override
    protected void onStart() {
        super.onStart();
        Toast.makeText(this, "onStart called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onStart called");
    }

    @Override
    protected void onResume() {
        super.onResume();
        Toast.makeText(this, "onResume called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onResume called");
    }

    @Override
    protected void onPause() {
        super.onPause();
        Toast.makeText(this, "onPause called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onPause called");
    }

    @Override
    protected void onStop() {
        super.onStop();
        Toast.makeText(this, "onStop called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onStop called");
    }

    @Override
    protected void onRestart() {
        super.onRestart();
        Toast.makeText(this, "onRestart called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onRestart called");
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Toast.makeText(this, "onDestroy called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onDestroy called");
    }
}
Step 2: Create the Layout File
The layout can be simple, as the primary focus is on the life cycle methods. However, you can include a basic text view to give the activity some content.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Activity Life Cycle Demo"
        android:textSize="24sp"/>

</LinearLayout>

2]
Step 1: Handle Permissions in AndroidManifest.xml
Ensure the application has permission to write to external storage.

xml

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.example.sdcardwriter">

    <application>
        <!-- Your application code -->
    </application>

    <!-- Required permission to write to external storage -->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
</manifest>
Step 2: Create the Main Activity
This activity will contain an EditText for user input and a Button to write data to a file on the SD card.

java

package com.example.sdcardwriter;

import android.os.Bundle;
import android.os.Environment;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class MainActivity extends AppCompatActivity {

    private EditText userInput;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        userInput = findViewById(R.id.user_input); // EditText for user input
        Button writeButton = findViewById(R.id.write_button); // Button to write data to the SD card

        writeButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                writeDataToSDCard();
            }
        });
    }

    private void writeDataToSDCard() {
        String data = userInput.getText().toString().trim();

        if (TextUtils.isEmpty(data)) {
            Toast.makeText(this, "Please enter some text.", Toast.LENGTH_SHORT).show();
            return;
        }

        if (!isExternalStorageWritable()) {
            Toast.makeText(this, "SD card not writable or not present.", Toast.LENGTH_SHORT).show();
            return;
        }

        File sdCard = Environment.getExternalStorageDirectory(); // Get the root directory of the SD card
        File myFile = new File(sdCard, "my_data.txt"); // Create a file in the SD card

        try (FileWriter writer = new FileWriter(myFile, true)) { // Open in append mode
            writer.write(data + "\n"); // Write data to the file
            Toast.makeText(this, "Data written to SD card.", Toast.LENGTH_SHORT).show();
        } catch (IOException e) {
            Toast.makeText(this, "Error writing to SD card.", Toast.LENGTH_SHORT).show();
        }
    }

    // Check if the external storage is writable
    private boolean isExternalStorageWritable() {
        String state = Environment.getExternalStorageState();
        return Environment.MEDIA_MOUNTED.equals(state); // Check if the SD card is mounted and writable
    }
}
Step 3: Create the Layout File
This layout includes an EditText for user input and a Button to trigger writing data to the SD card.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/user_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter some text"/>

    <Button
        android:id="@+id/write_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Write to SD Card"/>

</LinearLayout>
-----------
Slip 22

1]
Step 1: Define Drawable Resources
Ensure you have at least two images in your res/drawable folder to switch between. You can add images by dragging them into the drawable folder in your Android project.

For example:

image1.png: The first image.
image2.png: The second image.
Step 2: Create the Main Activity
This activity contains an ImageView to display the image and a button to change the displayed image.

java

package com.example.changeimage;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private ImageView imageView;
    private boolean isImageOneDisplayed = true; // Track which image is currently displayed

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        imageView = findViewById(R.id.image_view); // The ImageView to display images
        Button changeImageButton = findViewById(R.id.change_image_button); // Button to change the image

        changeImageButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                changeImage();
            }
        });
    }

    private void changeImage() {
        if (isImageOneDisplayed) {
            imageView.setImageResource(R.drawable.image2); // Change to image2
        } else {
            imageView.setImageResource(R.drawable.image1); // Change to image1
        }

        isImageOneDisplayed = !isImageOneDisplayed; // Toggle the boolean
    }
}
Step 3: Create the Layout File
Define a layout with an ImageView to display the image and a Button to change the displayed image.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center">

    <ImageView
        android:id="@+id/image_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:src="@drawable/image1" <!-- Default image -->
        android:contentDescription="Displayed Image"/>

    <Button
        android:id="@+id/change_image_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Change Image"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
This activity will contain the logic to perform the selected operation when the user clicks a button.

java

package com.example.numericoperations;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText numberInput;
    private RadioGroup operationGroup;
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        numberInput = findViewById(R.id.number_input); // EditText to input the number
        operationGroup = findViewById(R.id.operation_group); // RadioGroup to select an operation
        resultText = findViewById(R.id.result_text); // TextView to display the result

        Button checkButton = findViewById(R.id.check_button); // Button to trigger the operation
        checkButton.setOnClickListener(v -> performOperation());
    }

    private void performOperation() {
        String numberStr = numberInput.getText().toString().trim();

        if (TextUtils.isEmpty(numberStr)) {
            Toast.makeText(this, "Please enter a number.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            int number = Integer.parseInt(numberStr); // Convert the input to an integer
            int selectedOperationId = operationGroup.getCheckedRadioButtonId(); // Get the selected radio button

            if (selectedOperationId == R.id.radio_odd_even) {
                if (number % 2 == 0) {
                    resultText.setText("The number is even.");
                } else {
                    resultText.setText("The number is odd.");
                }
            } else if (selectedOperationId == R.id.radio_positive_negative) {
                if (number > 0) {
                    resultText.setText("The number is positive.");
                } else if (number < 0) {
                    resultText.setText("The number is negative.");
                } else {
                    resultText.setText("The number is zero.");
                }
            } else if (selectedOperationId == R.id.radio_square) {
                int square = number * number; // Calculate the square
                resultText.setText("The square of the number is: " + square);
            } else {
                Toast.makeText(this, "Please select an operation.", Toast.LENGTH_SHORT).show();
            }
        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid input. Please enter a valid integer.", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 2: Create the Layout File
Design the layout with an EditText for user input, a RadioGroup with multiple radio buttons for different operations, and a Button to trigger the operation.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/number_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter a number"/>

    <RadioGroup
        android:id="@+id/operation_group"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <RadioButton
            android:id="@+id/radio_odd_even"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Odd or Even"/>

        <RadioButton
            android:id="@+id/radio_positive_negative"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Positive or Negative"/>

        <RadioButton
            android:id="@+id/radio_square"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Square"/>

    </RadioGroup>

    <Button
        android:id="@+id/check_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Check"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:text="Result will be displayed here"/>

</LinearLayout>
-----------
Slip 23

1]
Step 1: Create the Main Activity
This activity demonstrates multiple implicit intents with buttons to trigger various actions.

java

package com.example.implicitintentdemo;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.widget.Button;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        Button openWebPageButton = findViewById(R.id.open_web_page_button);
        Button dialPhoneNumberButton = findViewById(R.id.dial_phone_number_button);
        Button sendEmailButton = findViewById(R.id.send_email_button);
        Button viewLocationButton = findViewById(R.id.view_location_button);

        openWebPageButton.setOnClickListener(v -> openWebPage("https://www.example.com"));
        dialPhoneNumberButton.setOnClickListener(v -> dialPhoneNumber("1234567890"));
        sendEmailButton.setOnClickListener(v -> sendEmail("test@example.com", "Subject", "Email body text"));
        viewLocationButton.setOnClickListener(v -> viewLocation("geo:37.7749,-122.4194"));
    }

    private void openWebPage(String url) {
        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
        if (intent.resolveActivity(getPackageManager()) != null) {
            startActivity(intent); // Open the web page
        } else {
            Toast.makeText(this, "No application to open web pages.", Toast.LENGTH_SHORT).show();
        }
    }

    private void dialPhoneNumber(String phoneNumber) {
        Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + phoneNumber));
        if (intent.resolveActivity(getPackageManager()) != null) {
            startActivity(intent); // Open the dialer with the phone number
        } else {
            Toast.makeText(this, "No application to dial phone numbers.", Toast.LENGTH_SHORT).show();
        }
    }

    private void sendEmail(String emailAddress, String subject, String body) {
        Intent intent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts("mailto", emailAddress, null));
        intent.putExtra(Intent.EXTRA_SUBJECT, subject);
        intent.putExtra(Intent.EXTRA_TEXT, body);
        if (intent.resolveActivity(getPackageManager()) != null) {
            startActivity(intent); // Open the email application
        } else {
            Toast.makeText(this, "No email application found.", Toast.LENGTH_SHORT).show();
        }
    }

    private void viewLocation(String geoUri) {
        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(geoUri));
        if (intent.resolveActivity(getPackageManager()) != null) {
            startActivity(intent); // Open the map application
        } else {
            Toast.makeText(this, "No application to view locations.", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 2: Create the Layout File
This layout contains buttons to trigger various implicit intents.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center">

    <Button
        android:id="@+id/open_web_page_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Open Web Page"/>

    <Button
        android:id="@+id/dial_phone_number_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Dial Phone Number"/>

    <Button
        android:id="@+id/send_email_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Send Email"/>

    <Button
        android:id="@+id/view_location_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="View Location on Map"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
In this activity, you'll manage user input, handle radio buttons and checkboxes, and define button actions.

java

package com.example.messageformatter;

import android.graphics.Color;
import android.graphics.Typeface;
import android.os.Bundle;
import android.text.Html;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText nameInput;
    private TextView displayLabel;
    private RadioGroup colorGroup;
    private CheckBox boldCheckBox, italicCheckBox, underlineCheckBox;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        nameInput = findViewById(R.id.name_input);
        displayLabel = findViewById(R.id.display_label);

        colorGroup = findViewById(R.id.color_group); // Radio buttons for text color

        boldCheckBox = findViewById(R.id.bold_checkbox);
        italicCheckBox = findViewById(R.id.italic_checkbox);
        underlineCheckBox = findViewById(R.id.underline_checkbox);

        Button displayButton = findViewById(R.id.display_button); // Display the message
        displayButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                displayMessage();
            }
        });

        Button clearButton = findViewById(R.id.clear_button); // Clear the input and label
        clearButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                clearText();
            }
        });

        Button exitButton = findViewById(R.id.exit_button); // Exit the application
        exitButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish(); // Close the activity
            }
        });
    }

    private void displayMessage() {
        String name = nameInput.getText().toString().trim();

        if (name.isEmpty()) {
            displayLabel.setText("Please enter your name.");
            return;
        }

        String message = "Hello, " + name + "!";

        // Set text style based on checkboxes
        int textStyle = Typeface.NORMAL;
        if (boldCheckBox.isChecked()) {
            textStyle |= Typeface.BOLD;
        }
        if (italicCheckBox.isChecked()) {
            textStyle |= Typeface.ITALIC;
        }

        displayLabel.setTypeface(null, textStyle);

        // Underline the text if the checkbox is checked
        if (underlineCheckBox.isChecked()) {
            displayLabel.setText(Html.fromHtml("<u>" + message + "</u>"));
        } else {
            displayLabel.setText(message); // Reset text without underline
        }

        // Set text color based on the selected radio button
        int selectedColorId = colorGroup.getCheckedRadioButtonId();
        switch (selectedColorId) {
            case R.id.red_radio:
                displayLabel.setTextColor(Color.RED);
                break;
            case R.id.green_radio:
                displayLabel.setTextColor(Color.GREEN);
                break;
            case R.id.blue_radio:
                displayLabel.setTextColor(Color.BLUE);
                break;
            default:
                displayLabel.setTextColor(Color.BLACK); // Default color
                break;
        }
    }

    private void clearText() {
        nameInput.setText(""); // Clear the text input
        displayLabel.setText(""); // Clear the label
        boldCheckBox.setChecked(false);
        italicCheckBox.setChecked(false);
        underlineCheckBox.setChecked(false);
        colorGroup.clearCheck(); // Clear the radio button selection
    }
}
Step 2: Create the Layout File
Design the layout with an EditText for name input, a TextView for the label, radio buttons for text color, checkboxes for text style, and buttons for different actions.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter your name"/>

    <RadioGroup
        android:id="@+id/color_group"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <RadioButton
            android:id="@+id/red_radio"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Red"/>

        <RadioButton
            android:id="@+id/green_radio"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Green"/>

        <RadioButton
            android:id="@+id/blue_radio"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Blue"/>

    </RadioGroup>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <CheckBox
            android:id="@+id/bold_checkbox"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Bold"/>

        <CheckBox
            android:id="@+id/italic_checkbox"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Italic"/>

        <CheckBox
            android:id="@+id/underline_checkbox"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Underline"/>

    </LinearLayout>

    <Button
        android:id="@+id/display_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Display"/>

    <Button
        android:id="@+id/clear_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Clear"/>

    <Button
        android:id="@+id/exit_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Exit"/>

    <TextView
        android:id="@+id/display_label"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:text=""/>

</LinearLayout>

-----------
Slip 24

1]
Step 1: Create the Main Activity
This activity will contain the logic to accept user input and display the string in uppercase and lowercase using Toast messages.

java

package com.example.textconverter;

import android.os.Bundle;
import android.text.TextUtils;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText userInput; // EditText for user input

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        userInput = findViewById(R.id.user_input);

        Button upperCaseButton = findViewById(R.id.upper_case_button);
        Button lowerCaseButton = findViewById(R.id.lower_case_button);

        upperCaseButton.setOnClickListener(v -> displayUppercase());
        lowerCaseButton.setOnClickListener(v -> displayLowercase());
    }

    private void displayUppercase() {
        String inputText = userInput.getText().toString().trim();

        if (TextUtils.isEmpty(inputText)) {
            Toast.makeText(this, "Please enter some text.", Toast.LENGTH_SHORT).show();
            return;
        }

        String upperCaseText = inputText.toUpperCase();
        Toast.makeText(this, upperCaseText, Toast.LENGTH_SHORT).show(); // Display as toast message
    }

    private void displayLowercase() {
        String inputText = userInput.getText().toString().trim();

        if (TextUtils.isEmpty(inputText)) {
            Toast.makeText(this, "Please enter some text.", Toast.LENGTH_SHORT).show();
            return;
        }

        String lowerCaseText = inputText.toLowerCase();
        Toast.makeText(this, lowerCaseText, Toast.LENGTH_SHORT).show(); // Display as toast message
    }
}
Step 2: Create the Layout File
This layout contains an EditText for user input and two buttons to trigger displaying the string in uppercase and lowercase using Toast.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/user_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter text"/>

    <Button
        android:id="@+id/upper_case_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Display Uppercase"/>

    <Button
        android:id="@+id/lower_case_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Display Lowercase"/>

</LinearLayout>

2]
Step 1: Create the SQLite Database Helper
Define a helper class to manage creating the "Car" table, inserting new records, and retrieving all records.

java

package com.example.cardatabase;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class CarDatabaseHelper extends SQLiteOpenHelper {

    private static final String DATABASE_NAME = "CarDatabase";
    private static final int DATABASE_VERSION = 1;

    private static final String TABLE_CAR = "Car";
    private static final String COLUMN_ID = "id";
    private static final String COLUMN_NAME = "name";
    private static final String COLUMN_TYPE = "type";
    private static final String COLUMN_COLOR = "color";

    public CarDatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // Create the Car table
        String createTableQuery = "CREATE TABLE " + TABLE_CAR + " (" +
                COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_NAME + " TEXT, " +
                COLUMN_TYPE + " TEXT, " +
                COLUMN_COLOR + " TEXT)";
        db.execSQL(createTableQuery);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_CAR);
        onCreate(db);
    }

    // Insert a new record into the Car table
    public boolean addCar(String name, String type, String color) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(COLUMN_NAME, name);
        values.put(COLUMN_TYPE, type);
        values.put(COLUMN_COLOR, color);

        long result = db.insert(TABLE_CAR, null, values);
        return result != -1; // Returns true if insertion was successful
    }

    // Retrieve all records from the Car table
    public Cursor getAllCars() {
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT * FROM " + TABLE_CAR;
        return db.rawQuery(query, null); // Retrieve all records
    }
}
Step 2: Create the Main Activity
This activity will insert new car details and show all car details based on button clicks.

java

package com.example.cardatabase;

import android.database.Cursor;
import android.os.Bundle;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private CarDatabaseHelper dbHelper; // SQLite database helper
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        dbHelper = new CarDatabaseHelper(this); // Initialize the database helper
        resultText = findViewById(R.id.result_text); // TextView to display results

        Button insertButton = findViewById(R.id.insert_button); // Button to insert new records
        Button showAllButton = findViewById(R.id.show_all_button); // Button to show all car details

        insertButton.setOnClickListener(v -> insertNewCars());
        showAllButton.setOnClickListener(v -> showAllCars());
    }

    private void insertNewCars() {
        dbHelper.addCar("Toyota Corolla", "Sedan", "White");
        dbHelper.addCar("Ford F-150", "Truck", "Black");
        dbHelper.addCar("Honda Civic", "Sedan", "Blue");
        dbHelper.addCar("Chevrolet Tahoe", "SUV", "Red");
        dbHelper.addCar("Jeep Wrangler", "SUV", "Green");

        resultText.setText("5 new car details inserted.");
    }

    private void showAllCars() {
        Cursor cursor = dbHelper.getAllCars(); // Get all car records

        if (cursor != null && cursor.moveToFirst()) {
            StringBuilder sb = new StringBuilder();
            do {
                int id = cursor.getInt(cursor.getColumnIndex(CarDatabaseHelper.COLUMN_ID));
                String name = cursor.getString(cursor.getColumnIndex(CarDatabaseHelper.COLUMN_NAME));
                String type = cursor.getString(cursor.getColumnIndex(CarDatabaseHelper.COLUMN_TYPE));
                String color = cursor.getString(cursor.getColumnIndex(CarDatabaseHelper.COLUMN_COLOR));

                sb.append("ID: ").append(id).append("\n");
                sb.append("Name: ").append(name).append("\n");
                sb.append("Type: ").append(type).append("\n");
                sb.append("Color: ").append(color).append("\n");
                sb.append("---------------------------\n");
            } while (cursor.moveToNext());

            resultText.setText(sb.toString());
        } else {
            resultText.setText("No car records found.");
        }
    }
}
Step 3: Create the Layout File
This layout contains buttons to trigger inserting new records and displaying all car details, along with a TextView to display the results.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <Button
        android:id="@+id/insert_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Insert 5 New Car Details"/>

    <Button
        android:id="@+id/show_all_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Show All Car Details"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:text="Results will be displayed here"/>

</LinearLayout>
-----------
Slip 25

1]
Step 1: Permissions in AndroidManifest.xml
Ensure your application has the necessary permissions to send SMS messages. Also, request runtime permissions if needed.

xml

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.example.smsapp">

    <application>
        <!-- Your application code -->
    </application>

    <!-- Required permission to send SMS -->
    <uses-permission android:name="android.permission.SEND_SMS"/>
    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>

</manifest>
Step 2: Create the Main Activity
This activity handles the logic for sending SMS messages, including requesting runtime permissions and using SmsManager.

java

package com.example.smsapp;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.telephony.SmsManager;
import android.text.TextUtils;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

public class MainActivity extends AppCompatActivity {

    private static final int SMS_PERMISSION_REQUEST_CODE = 1;
    private EditText phoneNumberInput;
    private EditText messageInput;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        phoneNumberInput = findViewById(R.id.phone_number_input);
        messageInput = findViewById(R.id.message_input);
        Button sendSmsButton = findViewById(R.id.send_sms_button);

        sendSmsButton.setOnClickListener(v -> sendSms());

        checkSmsPermission(); // Check for SMS permission at runtime
    }

    private void checkSmsPermission() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.SEND_SMS) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.SEND_SMS}, SMS_PERMISSION_REQUEST_CODE);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == SMS_PERMISSION_REQUEST_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "SMS permission granted.", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "SMS permission denied.", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void sendSms() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.SEND_SMS) != PackageManager.PERMISSION_GRANTED) {
            Toast.makeText(this, "SMS permission not granted.", Toast.LENGTH_SHORT).show();
            return;
        }

        String phoneNumber = phoneNumberInput.getText().toString().trim();
        String message = messageInput.getText().toString().trim();

        if (TextUtils.isEmpty(phoneNumber) || TextUtils.isEmpty(message)) {
            Toast.makeText(this, "Please enter both phone number and message.", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            SmsManager smsManager = SmsManager.getDefault();
            smsManager.sendTextMessage(phoneNumber, null, message, null, null);
            Toast.makeText(this, "SMS sent successfully.", Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            Toast.makeText(this, "Failed to send SMS.", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 3: Create the Layout File
This layout contains EditText fields for the phone number and SMS message, and a Button to send the SMS.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/phone_number_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter phone number"/>

    <EditText
        android:id="@+id/message_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter SMS message"/>

    <Button
        android:id="@+id/send_sms_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Send SMS"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
In this activity, implement the user interface for the login form and the login logic.

java

package com.example.loginform;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText usernameInput;
    private EditText passwordInput;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        usernameInput = findViewById(R.id.username_input); // EditText for username
        passwordInput = findViewById(R.id.password_input); // EditText for password

        Button loginButton = findViewById(R.id.login_button); // Login button
        loginButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                handleLogin();
            }
        });
    }

    private void handleLogin() {
        String username = usernameInput.getText().toString().trim();
        String password = passwordInput.getText().toString().trim();

        if (TextUtils.isEmpty(username) || TextUtils.isEmpty(password)) {
            Toast.makeText(this, "Please enter both username and password.", Toast.LENGTH_SHORT).show();
            return;
        }

        // Validate the username and password
        if (username.equals(password)) { // In this example, username and password must be the same
            Toast.makeText(this, "Login Successful...", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "Invalid Login", Toast.LENGTH_SHORT).show();
        }
    }
}
Step 2: Create the Layout File
Design the login form with EditText fields for username and password, and a Button for login.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/username_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Username"/>

    <EditText
        android:id="@+id/password_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Password"
        android:inputType="textPassword"/> <!-- Obscures the text for security -->

    <Button
        android:id="@+id/login_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Login"/>

</LinearLayout>